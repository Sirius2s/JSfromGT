/*
 * 2022-08-12 修复申请试用风控，更换nolan接口
 * 2022-05-27 修复优化版  By https://github.com/11111129/jdpro/
 * 如需运行请自行添加环境变量：JD_TRY，值填 true 即可运行
 * X1a0He by 11111129/jdpro/
 * 脚本是否耗时只看args_xh.maxLength的大小
 * 上一作者说了每天最多300个商店，总上限为500个，jd_unsubscribe.js我已更新为批量取关版
 * 请提前取关至少250个商店确保京东试用脚本正常运行
 * @Address: https://github.com/X1a0He/jd_scripts_fixed/blob/main/jd_try_xh.js

如需运行请自行添加环境变量：JD_TRY="true" 即可运行
脚本是否耗时只看args_xh.maxLength的大小（申请数量），默认50个，申请100个差不多15分钟
上一作者说每天申请上限300个（自测，没有申请过上限），关注店铺上限500个
关注店铺满了就无法继续申请，可用批量取关店铺取消关注

部分环境变量说明，详细请参考58行往下：
export JD_TRY="true"是否允许，默认false
export JD_TRY_PASSZC="false" #不过滤种草官类试用，默认true过滤
export JD_TRY_MAXLENGTH="50" #商品数组的最大长度，默认50个
export JD_TRY_PRICE="XX"#商品原价格，大于XX才申请，默认20
export JD_TRY_APPLYINTERVAL="6000" #商品试用之间和获取商品之间的间隔ms
export JD_TRY_APPLYNUMFILTER="10000" #过滤大于设定值的已申请人数
export JD_TRY_MINSUPPLYNUM="1" #最小提供数量
export JD_TRY_SENDNUM="10" #每隔多少账号发送一次通知，默认为4
export JD_TRY_UNIFIED="false" 默认采用不同试用组
export JD_TRY_NUM="7" 最多跑多少个CK，默认10

定时自定义，能用多久随缘了！！！
 */

const $ = new Env('京东试用')
const URL = 'https://api.m.jd.com/client.action'
let trialActivityIdList = []
let trialActivityTitleList = []
let trialActivityPriceList = []
let notifyMsg = ''
let AddMsg = ''
let size = 1;
$.isPush = true;
$.isLimit = false;
$.isForbidden = false;
$.wrong = false;
$.giveupNum = 0;
$.successNum = 0;
$.completeNum = 0;
$.getNum = 0;
$.try = true;
$.sentNum = 0;
$.cookiesArr = []
$.innerKeyWords =
    [
        "和田玉", "和田白玉", "昆仑玉", "阿富汗白玉", "阿富汗玉", "天然玉", "飘花玉", "和田碧玉", "天然白玉", "羊脂玉白", "翡翠玉石", "冰种白玉", "玉髓", "轻奢", "锁骨链", "手链", "脚链", "戒指", "指环", "项链", "项圈", "耳环", "珠宝", "耳坠", "吊坠", "耳线", "四叶草耳钉", "缅甸翡翠", "翡翠佛", "法莎尼亚", "莫桑钻", "莫桑石", "金钞", "镀真金", "玛瑙手", "玛瑙项链", "菩提", "手串", "佛珠", "手镯", "手绳", "挂件", "文玩", "镯子", "尾戒", "弥勒佛", "本命佛", "福锁", "档位珠", "转运珠", "木料", "檀木小葫芦", "烟灰缸", "烟灰柱", "泡茶盘", "把玩件", "手把件", "木雕健身", "收纳盘", "佛头吊坠", "玉坠", "平安扣", "如意锁", "阿梵尼", "御皇礼", "领针", "胸针", "银饰", "金饰", "仿真钻戒", "仿真结婚钻", "毛衣链", "小香盒", "利是封", "机票", "防色狼", "古币", "铜钱", "国旗", "天梭表带", "劳力士表带", "宝时捷表带", "美度表带", "浪琴表带", "歌罗瑞表带", "十瑞", "欧米茄表带", "JEAYOU", "DW表带", "替换表带", "苹果表带", "苹果手表表带", "扣表带", "佰时顿", "break品牌", "break手表", "break男", "百圣牛", "报时手表", "手表蓝牙音箱", "纸手表", "运转手表", "音符手表", "儿童手表", "bobobird", "mssm", "梦梭", "网红小姐姐款", "爱丽珍时", "简易小沙发", "亮面潮流", "黄金扑克", "折叠床", "便携显示器", "车载显示屏", "工业液晶屏", "黑板", "棘轮", "滴轮", "京港亚", "门帘", "奥希蒙", "Holen", "优巴兔", "迪梵路", "爱威亞", "柏萨尼", "烟花影", "杜莎菲尼", "欧森曼", "帅约", "梅克伦", "鹭咖", "玛欧璐", "欧迪鸟", "乔范行", "御福轩", "巴图腾", "TOUCH MISS", "塔驰密司", "梅黛斯", "皇冠查理", "韩恋优品", "亚切卡", "GSD 单鞋", "俏可妮", "亿兆路安特", "合季", "安勿语", "兴博隆", "蔻罗娜", "欧卡汇", "劳斯尼亚", "太平狼", "娇之诺诗", "村长聪哥", "石末", "妍府", "公牛世家", "莆田", "西雀王", "汐诗雅", "ZOZNYMEX", "SYDY", "Thrasher", "THRASHER", "Vlone life", "CHIC BOY", "梵希狗头", "尼鸿森", "兹麟峰", "艺汇家", "劳帝伦", "茵蒂斯", "bylure", "岚烨", "战域", "西木柒", "xo内增高", "流量卡", "手机卡", "电话卡", "不限速", "上网卡", "日租卡", "无限流量", "0月租", "纯流量", "流量多", "大流量", "手机号码", "电信号码", "移动号码", "联通号码", "流光数据线", "快充数据线", "外卖打印", "拍立得相机纸", "手机网卡", "手机壳", "苹果皮", "悠米思", "图拉斯", "智能机器人", "手机电池", "机器人盒子", "儿童麦克风", "亲子乐园", "保护壳", "保护套", "护镜壳", "防摔壳", "支架壳", "支架两用壳", "玻璃壳", "磨砂壳", "护镜硅胶", "冰透壳", "磁吸壳", "手机膜", "保护贴膜", "贴防尘", "水凝膜", "保护膜", "钢化膜", "柔化膜", "康宁膜", "防爆膜", "晶钻膜", "镜头膜", "高清膜", "秒贴膜", "陶瓷软膜", "全胶膜", "防尘膜", "洛荧", "助听器", "午睡枕", "抱枕", "护肩毯", "老寒腿", "关节炎", "腕带", "充电器底座", "小床头柜", "隔热棉", "房顶隔热", "雨靴", "雨鞋", "99元两", "99元2", "99得两", "唐装", "CK女包", "200斤", "鞋套", "甜美樱花", "褶皱打底衫", "尚艺华轩", "灶康", "康佳KKTV", "金钻皇冠", "欢呼好太太", "现代（HYUNDAI", "盛阳康", "美昀", "布克（Bock）", "麦德罗", "上亨", "米法欧", "德维莱", "健得龙", "唯开（vvk", "长虹（CHANGHONG", "哈王", "欧泊维", "长城（changcheng", "联塑（LESSO", "香港恒尊", "（taitai", "（wanti", "XUNDA", "VLVEE", "真汉子", "GUIDU", "莱信", "多佳田", "柯瑞勒", "范儿（style", "（单拍", "不发）", "不发货）", "（非卖", "者也（ZYE", "者也 ", "森普顿", "牧志简约实木", "手机声卡", "有线话筒", "专业话筒", "热水袋", "水暖毯", "电热水毯", "数码针灸", "气报警器", "水泥", "扎带", "双控开关", "沐浴椅", "抽水器", "德航永汇", "吃鸡按键", "吃鸡辅助", "手游充电线", "走位神器", "对讲机", "叫卖器", "龙头净化器", "洗手机", "洗手液机", "脂机", "抖机", "晾衣绳", "喷香机", "电动喷壶", "点火棒", "点火器", "远博吹风", "胜境小镇", "清洁棒", "清洁片", "机清洁液", "除灰", "马上修", "拍摄线", "键盘膜", "有线麦克风", "真麦克风", "合唱麦克风", "吸尘器赠品", "交换机", "激活码", "加热杯垫", "cd碟", "碟片", "cd老歌", "cd经典", "歌汽车", "舞曲光碟", "老歌u盘", "u盘教学", "名著u盘", "正版u盘", "武侠u盘", "电影u盘", "狼王u盘", "美高乐", "逗趣家", "杰蜜尔", "肥器", "专用键盘布", "擦杯布", "镜头布", "敬慎堂", "CD碟", "黑胶唱片", "双插电脑耳", "干电池式", "挂脖风扇", "挂脖子电风扇", "挂脖小风扇", "运动臂包", "壁虎支架", "口红包", "球杆包", "潮流帅气大毛领", "中老年毛领", "羊羔毛外套", "白色卫衣", "小西装", "皮夹克", "拜年服", "敬酒服", "分酒器", "皮衣", "头部按摩器", "头部按摩仪", "脑部按摩爪", "木枕", "按摩枕头", "乐伴LB-E666", "按摩头盔", "按摩披肩", "骏熙", "护颈仪F29", "绑腿", "油头", "按摩仪F06", "全身按摩锤", "腰枕", "排毒滚珠", "腰部靠垫按摩", "护腿", "制动护具", "么么鱼", "木丁丁", "激光理疗仪", "奥克斯洗脚", "腹部按摩", "发热护肩", "卧室台灯", "云石台灯", "补光灯", "美颜灯", "流氓灯", "大灯", "灯带", "投光灯", "厂房灯", "射灯", "室外灯", "院灯", "路灯", "灯笼", "字母灯", "情趣灯", "摄影灯", "庭院灯", "伴睡灯", "钓鱼灯", "鱼竿支架", "炮台支架", "控鱼器", "钓鱼鞋", "钓鱼伞", "鱼线轮", "仿真鱼饵", "浮漂", "中芝生物灯", "理疗灯", "吊灯", "壁灯", "围墙灯", "光疗灯", "露营灯", "野营灯", "改装灯泡", "汽车灯泡", "大灯改装", "盐灯", "前大灯", "led车灯", "LED车灯", "拍拍灯", "充电灯泡", "汽车LED大灯", "汽车led大灯", "LED汽车大灯", "头灯", "护眼睡眠灯", "氛围灯", "创意小夜灯", "内饰灯", "投影灯", "巡逻充电灯", "氛围小夜灯", "支架灯管", "消毒灯管", "地摊灯", "创意灯", "营地灯", "彩灯串", "太阳能夹子灯", "节奏灯", "尾灯", "南极人颈椎按摩器", "南极人眼睛眼部按摩", "联想颈椎按摩", "南极人（NANJIREN）颈椎按摩器", "南极人（NANJIREN）足浴盆", "南极人（NANJIREN）折叠足浴盆", "南极人（NANJIREN）眼", "南极人（NANJIREN） 颈椎按摩", "怡帆（e-FAN）眼", "揉捏眼部按摩器", "诺泰（Nuotai） 眼", "南极人（NANJIREN）全自动足浴", "南极人（NANJIREN）泡脚", "长虹智能泡脚", "美菱泡脚", "南极人泡脚", "倍呵（Behe）颈椎按摩", "obowai", "婴儿枕", "婴儿益生菌", "婴儿睡袋", "婴儿肉泥", "山地婴儿水", "婴儿碗", "婴儿料理", "防踢被", "婴儿新疆棉", "婴儿游泳桶", "婴儿背带", "婴儿磨牙", "婴儿护肤", "婴儿车", "婴儿推车", "婴儿床", "婴儿餐椅", "婴儿被", "婴儿玩具", "婴儿便盆", "婴儿定型", "定型枕", "跳跳椅", "弹跳椅", "宝宝沙发", "宝宝辅食泥", "宝宝检测", "新生宝宝", "宝宝维生素", "宝宝氨基酸", "安抚故事机", "宝宝餐具", "胎教", "胎心", "胎动", "儿童酱油", "儿童斗篷", "辅食碗", "手指点唱", "儿童彩妆", "儿童墨镜", "宝宝棉鞋", "迪士尼公主", "宝宝吃饭", "牙胶", "宝宝餐椅", "折叠餐椅", "儿童餐具", "儿童餐椅", "仿真宠物", "婴幼儿双语学习", "儿童马甲", "婴儿冬装", "婴儿衣服", "婴儿尿", "婴儿训练", "训练牙", "乳牙刷", "新生婴幼儿", "女童专用", "女童手提", "女童棉衣", "学生短靴", "奶嘴", "童雪地靴", "挝粮", "宝宝零食", "宝宝餐盘", "婴儿米饼", "艾薇的世界", "婴儿牙刷", "Gerber", "Spuddies", "幼儿健身", "非凡小熊", "宝宝面条", "牵引绳", "乐婴堂", "爱婴芙", "爱的营养大师", "方广", "AOLE-HW", "澳乐", "温奶器", "儿童调味", "儿童种植", "婴儿餐具", "婴儿硅胶", "LittleFreddie", "MIKIHOUSE", "mikihouse", "宝宝加", "孩儿乐", "婴儿水果泥", "第二餐", "婴儿日常护理", "卜错", "抱被", "德拉小熊", "婴儿喝水", "婴儿食谱", "宝宝学爬", "娃车坐垫", "Dentistar", "格兰宝", "芭米拉", "围兜", "艾艾屋", "米宝儿", "儿童内裤", "儿童座椅", "儿童睡裙", "分腿睡袋", "科普克", "儿童布鞋", "儿童帆布", "儿童坐便", "宝宝鞋", "五虎爪", "小小姿", "海龟爸爸", "苦甲", "新生礼盒", "丹参", "西洋参", "人参粉", "人参黄精", "参茶", "野山参", "野人参", "黄精", "杜仲", "山人参", "党参", "当归", "天麻", "人参片", "导入仪", "补水仪", "注氧仪", "修复仪", "蒸脸器", "电陶炉专用清洁刮刀", "指甲油", "漱口水", "买菜车", "食堂高压锅", "卡式炉", "灭火毯", "后跟垫", "内窥镜", "驱鸟器", "电视架", "电视机支架", "手机支架", "充电支架", "电视支架", "外机架", "室外空调支架", "托架配件", "吊架", "挂架", "方块机", "显示器支架", "电脑架", "地面波", "电视天线", "收款播放器", "收钱提示音响", "制冰机", "暖菜板", "凹面电磁炉", "执法仪", "执法记录仪", "工作记录仪", "低频理疗仪", "驱狗器", "电动车", "锁IC卡", "丰胸", "乳房", "下垂", "胸部", "乳腺", "美胸", "文胸", "胸垫", "发育期", "按摩精", "男用喷", "阴茎", "情趣礼品", "延迟喷", "延时喷", "延时膏", "海绵体", "AV棒", "av棒", "房事", "情趣用", "情趣内衣", "安全套", "保险套", "计生用", "缩阴", "前列腺", "跳蛋", "遗传斑", "老年斑", "美丽白祛斑面膜", "古木晒后", "悦己焕颜", "吉米美白", "haircube", "足皂", "御夫子", "腮红", "同仁堂美白", "同仁堂 美白", "同仁堂 烟酰胺", "吉康斯莱", "果壳酵母", "OKX手", "同仁堂祛斑", "24K黄金玻尿酸", "医用冷敷", "医用棉签", "2支装烟酰", "仁和 防脱育发", "玫瑰全因子抗皱", "黑耀防掉发", "红酒睡眠面膜保湿", "神经烟酰胺小安瓶", "紫苏净透竹炭清洁", "公立同济", "整复", "水杨酸洗面奶", "类蛇毒眼膜去黑眼圈", "去黑眼圈类蛇毒", "液5ml", " 5ml", "贵妇膏", "次抛原液", "同仁堂多肽抗皱精华", "六胜肽紧致原液", "同济堂药房", "【同济堂", "同仁堂 类蛇毒", "仁和 抬头", "白云山 美白祛斑", "同仁堂 去细纹", "同仁堂金桂", "海瑟薇袋包随机", "次抛精华", "水循环玻尿酸", "三剂面膜", "面膜6", "面膜型6", "面膜5", "膜4片", "膜1片", "膜7片", " 5片", "霜3g", "包 4片", "装10g", "10粒胶囊", "益生恩", "8g体验", "粉8g", "1片装", "装8g", "样3g", "10g体验", "霜5g", "华5ml", "带5ml", "样2ml", "膜5片", "膜3片", "霜5ml", "花3g", "膜3g", "液7ml", "乳糖酶", "马仁堂老黑膏", "冰王肤乐止痒沐浴露", "全能小白祛痘", "VDU 大麻", "VDU 精华", "mxl控油", "日本蜜梨同款", "马迷纯露迷迭", "玻尿酸面膜美白", "有界氨基酸", "c2u燕窝", "过滤网", "空调滤", "净化器滤", "净化器过滤网", "龙头过滤", "滤芯滤网", "滤网滤芯", "净水滤芯", "隔热板", "阻燃板", "棕垫薄定", "垫子定", "定制阳光房", "按尺定", "垫定", "尺寸定", "定制尺寸", "定制专拍", "大功率水泵", "220V全自动高压清洗", "220V高压清洗机", "220v洗车", "220v刷车", "OBD仪表", "220V汽车", "货车用", "220V神器便携刷车", "吸顶喇叭", "吸顶音", "定压喇叭", "录音喇叭", "时序器", "足浴桶双人", "焊台", "焊接台", "台式烧水炉", "隔水炖", "17L大容量", "热风枪", "钉枪", "多功能水枪", "转换插头", "汽车gps隐形定位", "追踪仪", "追踪器", "免费测量", "语音播报器", "学饮保温", "学饮杯", "学饮吸管", "重力球吸管", "吸管水", "搞怪", "恶搞", "财务软件", "用友", "管理软件", "财务软件", "查询软件", "收银软件", "服务手册", "评测服务", "测评服务", "验配检查", "激萌心礼", "幼儿英语启蒙", "挖掘机", "挖土机", "儿童启蒙 英文", "启蒙教材", "启蒙绘本", "滑步车", "滑行车", "滑板车", "滑车", "铭塔", "胶画", "自卸车", "工程车", "软弹枪", "娃娃套装", "娃娃玩具", "芭比娃娃", "芭比洋娃娃", "打印笔", "指读卡", "货柜车", "合金玩具车", "坦克玩具", "玩具枪", "沙滩玩具", "玩具钢琴", "玩具女孩", "学前玩具", "相机玩具", "化妆玩具", "早教玩具", "玩具挂铃", "玩具收纳凳", "玩具收纳架", "滚动玩具", "抽奖玩具", "抽奖券", "桌上足球", "木玩世家", "宝宝充气", "佰仕思", "挖掘玩具", "活石游戏机", "Teifoc", "儿童手风琴", "儿童相机", "儿童数码相机", "儿童游戏机", "室内台球", "台球桌", "益米", "Wenno", "DEERC", "贝恩施", "英格翰", "巴比精灵", "形状认知", "活石", "悟道猴", "牛萌萌", "复读鸭", "儿童口罩", "儿童化妆", "儿童小马桶", "儿童平衡车", "儿童电动摩托", "儿童益智", "儿童阳光房", "儿童帐篷", "教具", "蜡笔", "玩具车", "火车玩具", "洗澡玩具", "洗澡凳", "戏水玩具", "洗碗机玩具", "迷你厨房", "迷你小厨", "钻石剑", "华容道", "形状玩具", "遥控飞机", "遥控汽车", "遥控车", "遥控船", "直升机", "遥控快艇", "遥控特技车", "汽车闯关", "猪佩奇", "扭蛋机", "娃娃机", "拧螺丝", "曼哈顿球", "电路玩具", "硒鼓", "粉盒", "粉仓", "感光鼓", "文档保护页", "底片夹", "扫描配件", "幻灯片片夹", "搓纸轮", "分页器", "碳粉", "墨粉", "标签打印", "移动白板", "磁性白板", "磁性移动", "紫薇星", "标签机", "卡套挂绳", "桌牌", "党员牌", "胸卡", "口取纸", "分类纸", "每平方", "手提电脑包", "电脑包手提", "内胆包", "春联装饰品", "捆扎绳", "打包绳", "挂历", "台历", "年会礼品", "商务礼品", "军人纪念品", "政治纪念品", "开业礼品", "团建纪念品", "团建随手礼", "培训奖品", "纪念金", "PKPM", "会议纪念品", "留言板", "写字板", "周年庆纪念", "纪念券", "纪念章", "员工礼品", "商务伴手礼", "文具伴手礼", "百天满月", "满月周岁", "手足留念", "质越", "红韬", "佰芳苑", "水族胶", "莫斯胶", "啫喱胶", "珊瑚胶", "水草胶", "起泡胶", "渔网", "虾网", "抄网", "树苗", "花苗", "树种", "花种", "仿真绿植", "花泥", "多肉", "营养土", "草炭土", "盆栽", "绑菜", "铁丝网", "刺网", "刺绳", "刺丝", "养花", "装饰花", "金箔花", "花箱", "种植箱", "迷你种植", "草耙", "海绵胶带", "标签纸", "贴纸", "轮滑鞋", "起坐辅助器", "拉筋板", "呼啦圈", "隔离板", "丰帆", "带阀", "带呼吸阀", "搓泥宝", "车贴", "蜡划", "车痕", "修复液", "车漆", "钥匙包", "方向盘套", "车把套", "密封条", "缝隙", "封条", "除积碳", "保险杠", "镀晶剂", "防滑链", "车载颈椎枕", "防撞", "防擦", "遮挡", "摆件", "车饰", "抛光", "喷雾", "镀膜", "挂件", "钥匙", "后视镜", "雨眉", "洗车液", "雨刮", "空调系统清洁剂", "号码牌", "挪车牌", "手扶箱", "内饰贴", "防撞胶粒", "胶垫", "防撞贴", "车身贴纸", "反光条", "方向盘套", "车身装饰", "专用彩贴", "改装贴纸", "车镀膜剂", "腰线贴纸", "除锈剂", "扶手箱", "改装配件", "改装降油", "改装套餐", "内饰改装", "机滤", "精油", "香包", "香囊", "添加剂", "燃油宝", "清洗剂", "补胎", "充电枪", "活矿石", "冲剂", "饮片", "苦瓜片", "伤口护理", "护理垫", "试纸", "塑亿美健", "海水之露", "爱诗切", "AFFINITY LOVE U", "域发", "谷幽兰", "肤草集", "忆丽贝萝", "东方之艾", "沐浴阳光Sunbath", "苏和盛", "自由膜法", "贝露丝", "胶芝堂", "MAD媚多", "膜悦", "Modish Jasmine", "壹博士", "希颂", "妙媚", "梵蜜琳", "正宫御品", "施丽芬", "医后", "丽质华堂", "卿慕", "萃然美", "卡芙索", "明媚一生", "蝶蕊", "爱妃丽尔", "原生欧芙兰", "袋鼠妈妈", "源槿", "甄沐", "GOLKY", "尔卡尼", "悦丝汀", "塔莉妈妈", "老中医", "湜润夫人", "昕惠普", "蕊痕", "珍爱珍美人", "美其肤", "不老密", "美兰坊", "绽媄娅", "蔻诗弥", "薇儿逗号", "水肌沐", "康芙美", "珀芙研", "爱优奇", "梵依诗", "艾樱", "欧蓓恩", "萃植精", "体顺", "润凰", "美主人", "欧薇睿诺", "爱莎旎", "芭图斯", "俏红颜", "欧兰素皙", "蜜百皙", "香芙儿", "水梦丽", "贝迪芬缇", "黛汐", "克雷斯丹尼", "芪白草", "彩姿莱", "艾禾姬", "蒙域", "女笙", "玉多宝藏", "雅菲诗", "发状元", "曼皙妮", "艾丽碧丝", "天萃诗", "卡凡希", "与姿", "麦丹露", "Kazis", "斯朵夫", "儒意", "蒙投丽雪", "悘美萃", "卡芙兰", "玑岚", "珂芝雅", "HONCIEN", "韩瓷", "女神之美", "植贝", "靓喷", "卞卡", "全能小白", "碧琳", "九美子", "六闲", "容倾城", "优美加", "美继香水", "阿斯普雷", "南法庄园", "碧舒雅", "蔻赛", "周千堂", "魔贴世家", "态妍", "医知康", "润贝舒", "素说美丽", "洁芙泉", "BAIFUXIN", "Nisei", "芊慕", "杨家方", "品硬", "肌肤衣", "欧兰素", "Lastre", "茜芙兰", "丝草集", "素枧", "一木立花", "红之红墩", "艾芙洛", "舒安娜", "梦希蓝", "九西西", "茅仁堂", "谷崎", "夫专家", "莉珂蕊丝", "贝毕宁", "醒肤源", "仙兔", "NHBQ氨基", "唯尚颜", "诺媚尔", "蒙迪莎白", "百瑟肤研", "艾杜斯顿", "梦希蓝", "豆妃", "HOT 祛斑", "虎镖", "百肤欣", "庄迪", "Dr艾琳", "亮益生", "医朵", "姿颜肌", "幽珀兰", "卡薇尔", "宜佰宁", "橙蔻", "肌临", "赫俪娜姿", "古施琦", "草图腾", "古施琦", "ouyin", "克兰慕林", "倾颂", "菩悦", "完好如初", "吱言", "世歆堂", "守儿", "理芝堂", "中科宜康", "绿之韵", "健生堂", "素宇宙", "ICE ME", "娇氧", "贞肌元", "进口原料", "GLYKEN", "SKINO", "肽都", "本草汀", "牧顶丛", "VAZZINI", "定妆散粉", "粉饼", "伊芳澜", "Meisland", "IYOUB", "color candy", "colorcandy", "荟名门", "最媄", "ZUIMEI", "百草益", "佰花方", "神涛", "iact保湿", "WUHENMEI", "妩痕媄", "伊品草", "OULAN", "花迷植萃", "花戎", "紫缇", "梅里安", "嗨嗅", "橙宝", "nbottle", "时通", "龙博士", "茶一派", "摩肯", "楚妆", "寻香师", "慕际", "铰链", "合页", "西餐垫", "水管", "接头", "衣钩", "拉手", "暖气管", "软管", "穿衣镜", "试衣镜", "落地镜", "手纸盒", "励志字画", "煤气罐", "氦气罐", "燃气罐", "充电桩", "打泡器", "起泡器", "口诀表", "机油", "汽油", "循环泵", "继电器", "插座面板", "轨道插座", "机柜插座", "户外防爆插座", "防水插座", "五孔插座", "墙壁电源", "金属开孔器", "接线端子", "电线连接器", "展架", "kt板", "齐富软木板", "海报架", "工业装修", "全包装修", "装修方案", "面具", "远晶", "全国承建", "乡墅", "装饰画", "挂画", "福字", "涂料", "补漏", "缝剂", "拉手", "补漆", "保护条", "摇篮椅", "GESONGZHE", "发热围巾", "墙角", "壁纸", "墙纸", "墙贴", "补墙漆", "翻新漆", "背景墙", "地漏", "落水器", "看房", "家具蜡", "护腰带", "耳勺", "掏耳朵", "爆炸盒子", "手工相册", "嵌甲", "甲沟炎", "男靴", "马丁靴", "泳衣", "老人冬装", "过膝", "打底裤", "背带裤", "电加热马甲", "冰马甲", "暖袖", "皮裤", "上饵器", "老花镜", "老花眼", "烟嘴", "蕾丝手套", "雪纺衫", "紧身瘦腿", "黄金暖甲", "蕾丝V领", "亮片蕾丝", "蕾丝美背", "中老年羽绒", "衬衫女", "度假", "欧洲站", "半高领", "中老年马夹", "暖宫", "宫寒", "痛经", "暖宝宝", "暖贴", "暖身贴", "发热贴", "被子固定器", "修复颈椎", "中药热疗", "颈椎病", "磁石贴", "助行器", "助步器", "四脚拐杖", "空调套", "空调罩", "挂机罩", "折屏底座", "洗衣机底座", "洗衣机托架", "洗衣机支架", "钢琴罩", "主机托架", "主机托盘", "十字绣", "钻石绣", "草坪", "人造草皮", "圆顶吊顶", "轨道", "滑道", "阻尼缓冲", "防雾剂", "集成吊顶", "园林剪", "柴刀", "草刀", "修枝剪", "高枝剪", "电动剪", "锄头", "铁耙", "剥粒器", "灭火器", "预付款", "广告牌", "穿戴扬声器", "车载cd", "车载碟片", "车载dvd", "车载CD", "cd光盘", "车载音乐u盘", "车载u盘", "戏曲播放器", "仿古电话", "贴墙仪", "火花塞", "水平仪", "纱窗", "水分仪", "弹弓", "小拼图", "止鼾", "体检套餐", "同聖堂", "暖脚垫", "洁齿泡沫", "毕加猪", "侧弯矫正", "外翻矫正", "平底矫正", "分趾", "足膜", "脚膜", "脚趾矫正", "牙套矫正器", "牙粉", "声波洁牙", "假牙", "牙线棒", "牙齿矫正", "补牙", "剔牙器", "口腔正畸", "正畸保护", "矫正检查", "肥大矫正", "苔刷", "口腔检查", "刮痧板", "刮痧仪", "拔罐器", "刮脸板", "电子烟", "镜框", "营养师", "减脂", "烟油", "烟液", "烟雾", "长筒袜", "高筒袜", "半截袜子", "一次性袜子", "打底袜", "蕾丝花边", "打底女裤", "婆婆裤", "平衡球", "篮球框", "训练梯", "敏捷梯", "训练器", "训练服", "信息素", "车包", "荧光粉", "发光粉末", "夜光沙", "领带夹", "檀香", "供香", "沉香", "盘香", "挡风板", "防风罩", "挡风被", "遮阳网", "捆绑绳", "风衣", "永生花", "迷彩雨披", "高尔夫球", "烟盒", "表白神器", "奥斯科", "皮带头", "板扣裤带", "腰带头", "裤带头", "无头板扣", "平滑扣", "扣扣头", "舌帽", "贝雷帽", "安全帽", "瓜皮帽", "雷锋帽", "溜冰鞋", "太阳花", "饰唯美", "DVD", "dvd", "缓冲门", "阻尼弹簧", "门吸", "地吸", "松动剂", "润滑剂", "道具", "鞋拔", "制服", "制式秋", "海参", "青蟹", "章鱼", "八爪鱼", "鱿鱼", "海螺", "白玉贝", "鸟贝", "扇贝", "虾夷贝", "带鱼", "鳕鱼", "多春鱼", "鲳鱼", "金昌鱼", "石斑鱼", "黄花鱼", "平鱼", "墨鱼仔", "海蜇", "鲍鱼", "鳗鱼", "鱼柳", "鱼油", "鱼片", "鱼胶", "鱼鲜", "鱼糕", "鱼丸", "鱼饼", "鱼排", "鱼骨", "鱼皮", "鱼头", "刀鱼", "鲈鱼", "巴沙鱼", "鱼肉片", "鱼冻", "速干鱼护", "比目鱼", "鲽鱼", "蛋挞皮", "牙签机", "碱粉", "碱面", "碳酸钠", "莓岭", "芝麻丸", "黑醋", "燕塘", "灭鼠药", "杀鼠剂", "蟑螂药", "灭蟑螂", "杀蟑螂", "除蟑螂", "捕鼠器", "灭鼠器", "驱鼠器", "老鼠夹", "甲醛检测", "检测甲醛", "CELA赛娜", "防静电喷雾", "检测笔", "边夹", "发卡", "bb夹", "发箍", "发簪", "簪子", "儿童头饰", "发饰", "植发", "发膜", "发蜡", "假发", "染发", "染眉", "发带", "发际线", "头皮洁净霜", "发廊吹风", "石梳", "自动寸头", "发蓬", "蓬松粉", "除味盒", "去味剂", "除臭剂", "除味剂", "蔬果净", "连衣裙", "冬季衣服", "毛呢大衣", "胖子卫衣", "加肥加大", "宽松大码", "大码秋冬", "宽松加肥", "半身裙", "纱裙", "裙裤", "高腰喇叭", "本命年", "宴会服", "嘻哈外套", "花花公子羊羔绒", "和服", "芡实茶", "祛湿茶", "茶包", "薏米茶", "除湿气茶", "薏仁茶", "姜茶", "枳椇子", "润甘元", "菊花茶", "水果茶", "粉墨茶", "三高茶", "丁香茶", "花草茶", "向阳汤", "玫瑰花茶", "养生茶", "荷叶茶", "葛根茶", "菊苣根茶", "枸杞茶", "葛根片", "胖大海", "金银花", "罗汉果", "金花砖茶", "暖胃茶", "湿清茶", "崖黑茶", "荷叶茶", "润喉茶", "袋泡", "减肥茶", "小罐茶", "养生保健茶", "安睡茶", "解酒茶", "降酸茶", "新茶30克", "去湿气茶", "气泡粉", "泡腾片", "清脑茶", "调湿茶", "熬夜茶", "呵气如兰茶", "构树茶", "配方茶", "桑叶茶", "栀子茶", "养生花茶", "安胎茶", "降压茶", "苦丁茶", "冬瓜茶", "益甘茶", "餐厅用酒", "原浆老酒", "朗姆酒", "鸡尾酒", "烹饪酒", "黄酒", "花雕酒", "梅子酒", "果酒", "低度酒", "米酒", "饭酒", "甜酒", "花酒", "梅酒", "山楂酒", "女士酒", "喜酒", "国台", "竹筒酒", "百年井窖", "塞罕坝酒", "苦荞酒", "预调酒", "秘酿", "浒魄酒", "冰酒", "相公寨酒", "高粱酒", "养生酒", "老酒", "燕麦酒", "青瓷一坛香", "花悦干红", "禹福", "白水杜康", "散装白酒", "牛栏山", "永丰二锅头", "永丰牌二锅头", "滋补大曲", "肆拾玖坊", "赖茅", "今世缘", "红星百年", "白云边老通城", "六和液", "珍酒", "泸旗白酒", "河套酒业", "民族酒业", "朋克养生系列", "泸宜遵", "52度名酿藏品级", "奇迹庄园", "大师手酿", "珍五金装", "山东子曰老酒", "海龙屯酒", "大坛白酒", "45度唯炫", "河套王品格1号", "月子酒", "一桶金酒", "品鉴酒", "玫瑰冰酒", "蓑衣米酒", "台湾高粱酒", "鸭溪窖酒", "半干型加饭酒", "二曲白酒", "老酒坊", "桶装酒", "泡药酒", "百年白首酒", "花皙蔻", "黄鹤楼陈香", "洋河", "半壶酒", "西凤窖酒", "杜酱荷花酒", "荷花生肖酒", "酱父家白酒", "老机场白酒", "拾福", "陈酿光瓶年份酒", "金门高粱酒", "国台酒53度", "国韵G10", "杜酱", "荣和国肽酱香", "国韵生肖礼盒", "散装陈年白酒", "盒装红酒", "全家福酒", "茅台镇", "辉煌腾达佳品", "红潭酱酒", "百年大福老酒王", "纯粮食散装泡酒", "养生酒", "国威窖酒", "贵州金沙酒", "天朝上品", "秦皇御宴", "百川朝海", "西凤酒", "吉天下酒", "泸州市酒", "汾酒集团", "泸州贡", "茅台醇", "泸州醇", "女士低度甜酒", "红军渡", "千面英雄酒", "盛世郎", "五粮春", "生肖特曲", "五粮醇", "寻酿", "小酒", "小红花郎", "金象竹叶青", "贵州五星", "汉铭坊", "小糊涂仙", "泸州原浆酒", "贵禾帝樽", "奶啤", "领酱魂", "野格利口酒", "绵柔凤香", "红星大二锅头", "津酒", "红星二锅头", "扳倒井", "金沙酱", "古井", "迎驾", "婚庆", "永丰牌北京二锅头", "添兵添", "禧缘", "天意喜", "喜宴", "神泉古酒", "蓝汾", "金汾河", "华都", "劲牌", "庆酒", "八大作坊", "潭酒珍酿", "白金酒", "泸州窖主", "酒鬼", "劲酒", "黄鹤楼酒", "茅台集团", "五粮液股份", "老窖藏", "老窖 藏", "龙樽", "焦陂酒", "杏花村清香型", "丰谷纯酿", "国井", "叙府酒", "世义德", "建国酒", "郎牌特曲", "小郎酒", "荞酒", "皇台酒", "孔府", "仁酒", "仰韶", "百泉春", "帝浆古酱", "甜型酒", "长乐烧", "泸州老窖百调", "王茅", "婚宴喜庆", "老窖世家", "福寿喜庆", "蜀壹蜀贰", "手工黄酒", "枸杞酒", "手工老酒", "潭酒仙潭", "古越龙山", "回沙酒", "红星红星高照", "小茗酿", "手工糯米加饭", "柳林酒", "桂花米酒", "叙府大曲", "镇酒大曲", "九稻", "衡水老白干", "烧春酒", "武陵酒", "人参酒", "五岭洞藏", "顺品280", "泸州原浆", "女儿红绍兴黄酒", "普王", "汾牌老酒", "夑乐", "燮乐", "墨渊", "御寿酒", "董酒何香", "川北情", "帝兹", "小水井", "子弹杯", "丰谷老窖", "白金干酱", "高炉家酒", "珍宝坊", "小角楼", "泡酒瓶", "都汇康健乐梦安", "贵州大曲", "全兴特曲", "日昇昌", "一锦坊", "正和酒", "南福", "劲喜", "董香型", "迎宾酒", "交君酒", "汾杏", "百世窖酒", "大凤香", "凤香型", "婚礼宴请", "全兴 1963", "石花 老味", "双沟大曲", "柔和双沟红精品", "双沟名玻", "双沟金奖", "双沟浓香型", "传世窖池", "高端婚宴", "华茅", "叙州贡", "泸州雅纯", "至尊龙酒", "天顺缘", "军台酒", "红酱坊", "国凰酒", "老榆林酒", "T68特级", "福运双禧", "玻汾", "西安特曲", "中汾酒城", "浏阳河", "印象河南", "致中和", "全兴（1963）", "陈坛福酒", "金种子6", "浓香老窖", "古川", "邛酒", "怀庄", "青稞酒", "双龙戏珠", "脸谱酒", "容大酱酒", "六福连连", "六福美福吉祥", "六福喜结良缘", "坤沙纯粮优级酒", "六年窖", "老头曲", "典藏6", "庄藏", "谈先生", "婚宴用酒", "品鉴装", "古贝春", "贵州湄窖", "贵州金沙", "碧春酒", "十二兴", "秦俑侠酒", "陈酿V8", "赣酒", "金沙古茅", "功醺", "酒坛", "存酒", "青竹浓香", "青竹简粮", "家大业大", "麟久坊", "白沙浓酱", "刘伶醉润泉", "酒器", "花冠酒", "薇喜圣路易斯", "圣斯里堡庄园", "米兰之花", "女王之家", "拉法帝尼赤霞珠", "成人益生菌", "益生菌成人", "女性益生", "儿童益生菌", "益生菌儿童", "宝宝益生菌", "益生菌粉", "益生菌纤维", "益生菌固体", "活性益生菌", "设计益生菌", "笔记本电脑充电器", "袖珍监控", "国学机", "汽车电瓶", "剃光头", "光头神器", "学车", "摩托车电瓶", "活体", "o衫", "O衫", "保罗衫", "翻领t", "陪伴", "肥佬", "广场舞", "文胸", "性感", "站立办公", "广告衫", "代表团口罩", "灭活口罩", "3D立体口罩", "电热毛巾架", "电热蒸煮桶", "紫兰花海", "托腹枕", "带帽浴巾", "儿歌", "奶粉", "美赞臣", "牛初乳粉", "方广米粉", "奶片", "奶瓶", "断奶", "奶白金", "奶米粉", "储奶袋", "吸奶器", "喂奶枕", "背奶包", "妈咪包", "恒温调奶", "驼奶", "康复训练", "保健内裤", "男性保健", "成人保健", "飞机杯", "调制乳粉", "勃起", "伟弋", "阳倭", "牡蛎", "浴霸", "性用品", "成人用品", "女用润滑", "标准色卡", "英国卫裤", "汉服", "高潮", "活菌一号", "乌鸡", "单冷扇", "制冷扇", "相机包", "襁褓", "鼻饲", "冻梨", "水果萝卜", "冻花红果", "柿饼萝卜", "宠物饮水机", "宠物碗", "火腿", "自动喂食", "犬瘟", "猫藓", "猫瘟", "狗瘟", "兽用", "猪鼻龟", "宠物通用", "赶猪", "猪饲料", "猫粮", "狗粮", "猫罐头", "狗绳", "狗罐头", "猫咪专用", "犬专用", "猫咪饮水机", "FancyFeast", "猫零食", "猫爬架", "猫砂", "猫窝", "猫笼", "百因美", "鱼药", "鱼池过滤", "鱼缸", "鱼饲料", "狗洗澡", "麦德氏", "宠物益生菌", "龟粮", "龟食", "猫氨膏", "宠物洗耳", "洗耳水", "猫咪指甲", "狗指甲", "宠物洗澡", "宠物沐浴", "狗沐浴", "鱼粮", "鱼食", "猫玩具", "犬猫通用", "犬洗澡", "猫咪沐浴", "猫咪感冒", "专用猫咪", "猫专用", "猫力肠", "猫沐浴", "猫抓", "护爪膏", "化毛膏", "狗通用", "狗维生素", "猫梳", "狗毛梳", "宠物脱毛", "犬定制", "犬通用", "宠物干洗", "犬用", "狗衣", "宠物毛发", "专用狗", "龟专用", "宠物笼", "宠物冻", "犬种", "犬粮", "拼粮", "犬护肤", "狗杀螨", "狗皮肤", "猫口", "猫禽", "犬口", "鼠笼", "型犬", "爆毛粉", "泪痕", "狗日常", "狗零食", "狗胸", "狗秋冬", "猫增肥", "猫牛肉", "理毛器", "花萃泉", "温灸仪", "老年功能机", "演出服", "胰岛素", "洽谈椅", "餐桌椅", "桌子腿", "吊篮椅", "吊床", "吊椅", "公园椅", "折叠椅", "洗头椅", "旋转升降椅", "老北京布鞋", "爸爸鞋", "社会人", "精神小伙", "管道风机", "安眠", "粮小春", "地磅", "包装机", "公主裙", "公主鞋", "老年配方", "手推车", "狼牙", "贴砖机", "萨克斯背带", "萨克斯螺钉", "音哨卡", "萨克斯螺丝", "萨克斯支架", "萨克斯增频器", "民谣木吉他", "电子琴", "尤克里里", "民谣吉它", "立式钢琴", "乐器训练", "钢琴脚踏", "拇指琴", "纸尿裤", "尿不湿", "尿垫", "拉拉裤", "拉拉小短裤", "低聚果糖", "麻将牌", "麻将机", "瑜伽服", "爬行服", "爬行护", "外出服", "石斛", "刹车油", "瑜伽圈", "拉力带", "弹力带", "弹力圈", "学习方式", "直播学习", "学习辅导", "直播课", "学习讲堂", "精品课", "在线课", "在线学习", "在线教", "在线预约", "在线发", "在线网盘", "体验课", "网课教", "师网课", "课时", "函授", "录播课", "线上课", "校区", "陪练", "提升班", "课程培训", "电商培训", "会议培训", "互动网课", "集体网课", "拍网课", "视频课", "视频教", "课程视频", "视频讲", "内部课", "训练营", "现场课", "集体课", "次课", "互动课", "活动课", "学习资料", "试听课", "学习卡", "次卡", "年卡", "电子版", "应试培训", "视频素材", "剪辑推广", "证书培训", "工证", "拿证", "申请中介", "申请咨询", "快咨询", "有声点读书", "收银机", "高跟", "菌茶粉", "牛仔马甲", "名师直播", "萝卜长高", "时代顾邦", "玛咖", "鹿鞭", "致中和", "增肌粉", "营养配方粉", "新生儿", "扭扭弹力裤", "避孕", "桃花醉", "单核苷酸", "富勒烯", "飞耐仕", "谷瑞德胶囊", "软胶囊", "采尔胶囊", "康眠胶囊", "复方枣仁胶囊", "卵磷脂胶囊", "得而乐胶囊", "玉香胶囊", "华夏先葆", "巢倍滋", "卵巢保养", "和弦", "口服液", "氧气泵", "包皮阻复", "抽水泵", "骨密度片", "老年手机", "指纹贴", "破洞", "包臀裙", "吸痰器", "排痰器", "引流", "失禁", "溜娃", "蜂蜜", "蜂王浆", "蜂胶", "洗鼻", "菊粉", "步前鞋", "摇马", "旅行枕", "湿巾加热", "表演鞋", "学步", "美缝剂", "消费医疗", "怀孕期", "活鲜", "摩托车雨衣", "巨辣", "黄翠仙", "感爱谐", "新鲜蔬菜", "卸妆", "连体袜", "原瓶进口水", "功能性饮料", "功能饮料", "助眠饮料", "燕安居", "氧气瓶", "米糊", "营养米粉", "奶贝", "手工皂", "燃油宝", "舞蹈", "惊喜福袋", "扒鸡", "赠品福袋", "进口牛肉", "牛肉丸", "牛筋丸", "连体衣", "连体睡衣", "乳头", "晚礼服", "结婚礼服", "婚鞋", "饭店环保检查", "卧室小电视", "恒温小冰箱", "母婴小冰箱", "盆骨修复", "骨盆修复", "义乳", "凯驰集团VC3", "尊威", "单门电冰箱", "迷你小冰箱", "车载冰箱", "小烤箱", "车载烧水", "卧式冷柜", "小冰柜", "桃胶雪燕", "即冲燕窝", "鲜炖燕窝", "即食燕窝", "燕盏", "冰糖燕窝", "燕窝礼盒", "燕窝胶原", "康咖片", "神油", "鸡肉", "私处护理", "蒸箱烤箱二合一", "丁字裤", "三角裤", "三角内裤", "三角短裤", "女士内裤", "安全裤", "保险裤", "靴裤", "红内裤", "内裤女", "内衣女", "女童内衣", "女童打底", "女童牛仔", "一字肩", "-1岁", "-2岁", "-3岁", "-4岁", "-5岁", "-6岁", "-7岁", "-8岁", "-9岁", "-12个月", "110码", "120码", "130码", "140码", "22码", "24码", "26码", "补漏材料", "红酒柜", "雪茄", "玫瑰诗蜜", "防锈快干胶", "包金回纹戒", "自慰", "樱羚", "纹绣", "富贵天下", "润滑油", "太极服", "总成", "考勤机", "开水器", "开水桶", "顶扇", "吊扇", "壁扇", "排气扇", "儿童钙", "藻油", "海洋球", "实验器材", "泡澡桶", "吨桶", "吨吨", "顿顿", "顿桶", "眼线液", "充气游泳池", "狐臭", "硒片", "猴头菇颗粒", "叶黄素", "修正黑灵芝", "bumgenius", "激光笔", "扫描配件", "万家兴", "小轻芯弹力裤", "备孕", "台秤", "体重秤", "厨房秤", "秤商用", "计价秤", "计价称", "提秤", "商用电子秤", "领带", "癣", "痔", "疣", "癌", "痣", "疮", "瘤", "代理记账", "摩托车国四", "慕木阁", "眼影", "电子睡眠仪", "宝雀亮丽", "漆面镀晶", "干果机", "洗碗块", "碗单只", "面单盒", "电压力锅8L", "减肥瘦身青稞粉", "代餐", "速瘦", "调理肠胃饮品", "HPV", "hpv", "艾灸", "酵母片", "与菌共舞", "实验室", "化妆刷", "配方粉", "切割机", "电池管家", "乳杆菌", "车蜡", "肝损伤", "海洋生物饮品", "补血颗粒", "清洗服务", "山村风物", "护臀", "婚庆茶碗", "唇膜", "高拍仪", "上门服务", "上门量", "上门灭蟑", "云南旅游", "贵州旅游", "门票", "门 票", "版纳", "古镇", "瓷砖背胶", "Gagaking", "斗彩鸡缸杯", "弥玥泉", "YOUR-LIFE", "营养膏", "兰薇欧", "九叶草", "空调衫", "仿真丝绸", "酸枣仁膏", "八珍膏", "物膏", "按摩膏", "磨砂膏", "伏湿膏", "湿气膏", "玉灵膏", "养生膏", "膏方", "少女孩", "小女孩", "轮滚尺", "敷尔佳", "魔法蛋", "米诺地尔酊", "三草两木", "龙脑冰皇", "三帆易成", "连裤袜", "DEARSUN", "浴袍", "胶原蛋白肽", "胶原蛋白饮", "蛋白肽复合", "棒吧", "两轮代步滑板车", "智能窗帘电机", "翻页笔", "教鞭", "脚气", "糜烂", "鸡眼", "修脚", "银皮屑", "妇科", "迦迈", "小毛童点读笔", "高考", "茅缨", "龙头净水", "给药器", "疼贴", "止疼凝胶", "毛囊疙瘩", "骨贴", "戒烟贴", "减肥贴", "调理贴", "穴位贴", "点穴", "神经痛", "额头贴", "面瘫贴", "痉挛贴", "耳康贴", "痛贴", "贴膏", "膏贴", "膏药", "敷贴", "颈椎贴", "感冒贴", "消食贴", "鼻炎贴", "中药贴", "鼻炎凝胶", "鳄鱼皮表带", "鳄鱼皮皮带", "鳄鱼皮带", "鳄鱼皮车", "鳄鱼皮钥匙", "鳄鱼爪", "鳄鱼钥匙", "鳄鱼纹", "鳄鱼皮真皮", "保洁服务", "家政服务", "设计服务", "管理服务", "服务包", "胖MM", "胖mm", "孕产妇", "哺乳期", "冷冻新鲜", "新鲜冷冻", "充值卡", "测试", "座便", "蹲便", "电动童车", "定制预付", "孕妇油", "孕妇裤", "孕妇产后", "孕妇枕", "月子油", "孕妇月子", "解酒", "月子调理", "月子餐", "月子服", "月子礼品", "月子鸡", "孕妇装", "产后塑身", "孕妇乳母型", "孕妇手环", "孕妇钙", "产后收腹", "产后束身", "产后营养", "妊娠霜", "妊娠油", "月子病", "月子康复", "孕肚", "塑腹带", "束腹带", "收腹带", "托腹带", "蕾丝特", "爬爬服", "爬爬垫", "如意结佳品", "左旋肉碱", "太阳能热水器", "榴莲", "心钻装成长裤", "三七粉", "卫生巾", "铁棍怀山药", "乳胶漆", "弱碱性矿泉水", "6片装", "泡脚药包", "泡脚粉", "泡脚液包", "泡脚袋", "洗脚袋", "浴包", "澡包", "腰凳", "美瞳", "隐形眼镜", "音乐眼镜", "滑雪眼镜", "耳机眼镜", "晶石眼镜", "水晶石头", "骨传导蓝牙眼镜", "篮球眼镜", "仿真食品", "增压泵", "修护6", "基因检测", "试饮装", "霾表", "燃油添加剂", "中药研磨机", "磁力片积木", "一步裙", "佛跳墙", "梦之仙", "百色熊", "烟斗", "助眠仪", "失眠仪", "睡眠仪", "限量版6", "颈椎牵引", "脖套", "火锅套餐", "待产包", "幼儿园", "角色扮演", "头盔", "制冷器", "金色福袋", "磨粉机", "静脉曲张", "瑜伽裤", "塑身裤", "收腹裤", "穿戴空气净化", "乳贴", "铂金装成长裤", "灌肠", "润白透亮5", "手机套", "镀沙金", "雨衣", "雨裤", "补钙", "土鸡", "切肉机", "便秘", "制冷机", "篮球架", "教程", "铁皮枫斗", "饮用矿泉水", "冷冻大虾", "清火宝", "金线莲", "男性口服", "幼儿配方", "电焊面罩", "散冷空调", "定金", "返现券", "返1000券", "抵扣券", "抵用券", "水光针", "回水器", "循环泵", "顶喷花洒", "袖扣", "暖气片", "老花镜", "狼骨手链", "内裤洗护机", "摩托车骑行服", "骑行护膝", "车护膝", "刹车片", "过家家", "围栏", "护栏", "护网", "蚊帐", "老人语音手机", "老人拐杖", "冻干粉", "刺猬菌菇", "河田飞鸡", "单筒望远镜", "钥匙壳", "AA99防辐射", "清水洗涤宝", "杀菌剂", "杀虫剂", "防虫剂", "除菌液", "显示器支臂", "显示器单支臂", "三人沙发", "瑶妹泡脚桶", "桶式吸尘器", "复古电话机", "阿胶块", "阿胶糕", "阿胶片", "扫码枪", "ETC设备", "抛光机", "劳保", "女皮鞋", "火麻油", "火麻仁油", "紫苏油", "山茶油", "南瓜籽油", "核桃油", "葡萄籽油", "橄榄油", "椰子油", "小魔仙魔法棒", "火花塞", "周庄特产肘子", "桑黄", "补锌片", "AIZOON", "充气床", "充气垫", "户外充气", "题库", "浮潜背心", "降温背心", "降温马甲", "防爆开关", "安全带", "保险带", "海藻粉", "汽车钥匙包", "固体饮料", "鲜花速递", "百合鲜花", "阳具", "龟头", "龟 头", "乳铁蛋白", "散养", "牛尾骨", "智伴逻辑思维", "硬件钱包", "卫博士", "随身wifi", "5g随身", "移动wifi", "文档保护页", "茗花有主", "趴趴走", "落地旗杆", "生蚝", "蝉蛹", "产品选型彩页", "叶酸铁片", "添佳片", "灵芝片", "银杏叶片", "光纤收发器", "新鲜松茸", "胶原蛋白水", "早教学习机", "婴幼儿早教", "早教婴幼儿", "婴儿早教", "早教婴儿", "早教认字", "早教益智", "早教启", "幼儿启", "早教盒", "巧虎早教", "早教机", "变形机器人", "早教故事机", "田七粉", "漾妍儿", "桃花胶", "木耳", "银耳", "桦树茸", "白菜干", "刺梨", "硒鸽", "老鸽", "猪肚", "毛肚", "孕妈装", "仿真树", "补肾", "沙金手链", "致语堂", "樱智", "私密处", "生理内裤", "母婴衣服", "哺乳", "快感", "牛小排", "烟雾报警器", "璃门指纹锁", "贝欧", "玄关桌", "泡澡木桶", "礼拜垫", "U型锁", "地锁", "电瓶车锁", "摩托车锁", "术后营养", "术后修复", "术后恢复", "化疗营养", "割草机", "双胆电饭", "机械电饭", "塑形服务", "直板老人手机", "齿轮油", "塑身衣", "运动内衣", "美体内衣", "无痕内衣", "副乳", "人字拖", "婴幼儿专用", "五子衍宗", "民谣吉他", "电动晾衣架", "智能晾衣机", "洗衣机柜", "营养补充", "酵白营养", "增稠", "调理营养", "蒸烤二合一", "老人家用吸氧", "Ablycora", "健康风险排查", "地暖", "电暖手套", "TX860", "K30FK806", "WPF418L", "T1-108B", "GW-1888", "LF-1066", "ED-1888", "M1-L213B", "NU-DM300", "C-9820", "ZTB32N", "KSC-8152", "BR-0003", "XD-X", "ERVP19", "SH-737DH", "BZ305", "SPT-C25F", "B401F", "B75M666GX", "N309-01", "CG-UF-1", "YS-IC09B02T", "E358898", "FB-OP-PHS-1", "LED-861B-A", "C-9816", "C-9821", "FH6270", "XDZ100-EB", "HS11-2209", "FS871", "ZTP380F3", "KY-77-DJ", "WS80N", "XL089A", "XCQJL71A", "XCQJL98A", "FS889", "XD-R14", "BZ517B", "JZT-GT02S", "JZY-GT02S", "N154-01", "ZTD108-2P", "CG-UF-3", "S104-06", "XDZ100-EJ", "MB90VT13", "EBM3365W", "VT-1103", "YR101A", "WL-J10U", "XQB70-A19399", "BC-93HF", "PT3505", "WPZ08ZDHL", "YS-IC20B03C", "YCB-08", "BL-LBS12", "YR1207S-X", "YS-IC2002Y", "KY-C1010T", "B3214", "JZT-Q1", "S133-01", "TC-06ICB1", "JZY-TE", "CFB-X30", "笛头", "轮椅", "室内滑梯", "打磨机", "支架臂", "李万山", "隐藏式监控器", "三防老人手机", "美容仪凝胶", "赖高淮", "瘦瘦包", "雨伞架", "文件柜", "电动洗澡刷", "磨刀石架", "食用油小瓶", "显示器壁挂支架", "布诗顿", "泡茶柜", "试衣间凳", "配套实木小凳", "配套小凳", "实木小圆凳", "小板凳", "小凳子", "三脚换鞋凳", "三脚实木凳", "搭配实木凳", "金柏栎", "喜特森", "知尖", "寻雅", "首彬", "庆恩", "天木居", "默诺", "代言人实木", "步韵", "谱珞", "苏骊", "压片糖果", "哈欠糖果", "蹦床", "烟齿白", "吉米烟酰胺", "吉米雪颜", "信号探测器", "面板式酒店wifi", "酒店垃圾桶", "大号垃圾箱", "黔客来", "嘉米", "颈挂式音响", "古势", "启元牌", "牛肝菌", "独爱", "无线数字键盘", "果蔬泥", "黑虎掌菌", "睫毛", "遮光眼罩", "热敷眼罩", "遮光床帘", "表演服", "面板式AP", "镀黄金戒", "电子蜡烛", "肉苁蓉", "拍痧手", "运动蛋白粉", "购物小拖车", "芝士棒", "5片装", "5片盒装", "飞机枕", "套鞋机", "即溶普洱", "演出鞋", "面膜单片", "单片面膜", "单片随机", "破壁灵芝", "绘本阅读机器人", "幼儿英语拼读机", "酵素粉", "果蔬酵素", "果酵素粉", "水果酵素", "酵素液", "酵素饮", "酵素原液", "生理盐水", "资料夹", "浪漫香榭丽", "车载电饭", "车载电热", "车载便携保温瓶", "皂液机", "车载便携旅行水壶", "车载旅行水壶", "车载便携水杯旅行水壶", "运动水杯大容量", "饺子馅", "日料刺身", "牛仔外套", "两面穿外套", "渔公码头", "辅食牛肉泥", "对虾", "羊蝎子", "羊杂", "羔羊肉", "羊骨", "私处", "益生元酵母", "益生纤", "针叶樱桃粉", "橘红片", "牧舍", "独头黑蒜", "滴剂", "喷剂", "交泰丸", "定心丸", "培源丸", "吸油丸", "试用版", "作训鞋", "作训服", "作训靴", "阿胶固元", "眼彩", "老人呼叫器", "奶奶装", "中老年棉裤", "爷爷春秋", "鸡枞", "树汁饮料", "孢子粉", "4对装", "装2片", "两片装", "4gX", "3g礼盒", "5gx", "5mlX", "天然矿泉水", "天然椰子水", "小分子弱碱", "海拔3000", "固定电话", "意念控制", "卧式冰箱", "白内障", "汽车镀晶", "淫羊藿", "儿童软糖", "蛋白软糖", "鼓掌软糖", "乳腺", "旅行睡觉", "旅行护颈", "颈托", "车加热坐垫", "消毒柜商用", "商用厨房消毒", "商用圆形火锅", "商用锅", "商用电磁炉", "10L商用", "密鉴", "黑板漆", "羽绒裤", "乔曼妮", "电炒锅", "遥控器", "火锅店专用电磁", "火锅店电磁", "三元催化清洗", "晶瓷", "盲蛋", "兔八哥aj", "装换新", "手机内置电池", "电池更换", "电池大容量", "电池换新", "板换新", "菲耐德", "6XL", "7XL", "5XL", "3XL", "4XL", "电动毛绒", "XXXL", "救生衣", "时刻美", "烟盒", "乐动小内裤", "胸衣", "L盒装", "澳兰莎普", "罩衣", "头罩", "果蔬粉固体饮料", "花间酌", "蒂米妮", "匠界名传", "凯歌信息发布", "火漆印章", "木碗", "木碟", "汽油锯", "电锯", "折叠锯", "电链锯", "绿篱机", "角磨机", "电磨机", "柯德乐蓓润康", "睡袍", "踩脚", "法斗", "壮阳", "枸杞汁", "枸杞液", "枸杞原", "*5片", "5片*", "0.7米*1.4米", "4ml*", "8mL*", "5ml*", "2ml*", "4g*", "5g*", "9g*", "10ml*", "8ml*"
    ]
$.innerKeyWords_want = 
    [
        "固态硬盘", "移动硬盘", "DDR", "ddr", "集线器", "扩展坞", "智能腕表", "机械键盘", "无线鼠标", "静音鼠标", "FIIL", "电竞显示器", "腾讯极光", "陶瓷动圈", "错题打印机", "扫描词典笔", "智能翻译笔", "字典扫描笔", "电视盒子", "手机稳定器", "外置光驱", "移动光驱", "罗技", "Logitech", "卡西欧", "碧然德", "充气泵", "冷暖双", "冷暖两", "电热水袋", "记忆枕", "餐具套装", "无火香薰", "大马士革", "牙刷套装", "水牙线", "进口机芯日历", "变频滚筒", "激光扫地", "厨下式净水机", "立式饮水机", "落地扇", "循环扇", "多功能消毒", "前置过滤", "空调挂机", "HUSUM", "科沃斯", "筋膜枪", "SKG", "花洒套装", "Panasonic", "美孚", "Ninebot", "安全座", "无线吸尘", "格力", "美的", "拜尔", "内衣消毒", "ROAMAN电动牙刷", "牙刷充电", "充电电池", "TINECO", "智能空气净化", "碟碗套装", "按摩床垫", "应急启动电源", "拖洗一体", "净饮一体", "负离子吹风", "吹风机家用负离子", "苏泊尔", "九阳", "Quintus", "新安怡", "德拉玛", "babystone", "惠尔顿", "希诺", "特百惠", "老A", "乐扣乐扣", "膳魔师", "紫砂", "四季沐歌", "无线洗车", "钢笔", "速干笔", "中性笔", "直液笔", "得力", "晨光", "护眼台灯", "护眼灯", "门锁", "吸顶灯", "衣帽架", "塔扇", "清风", "心相印", "维达", "洁柔", "得宝", "甲刀套", "马卡龙圆形", "马卡龙 圆形", "门上单杠", "LEGO", "玻璃杯双层", "双层玻璃", "吸顶风扇灯", "全身靠椅", "头枕腰靠套装", "LKK55", "瑜伽垫", "跳绳垫", "HLA", "海澜之家", "顶呱呱", "安踏", "李宁", "江博士", "玩觅", "必迈", "准者", "木林森", "富贵鸟", "棉防臭", "防臭中", "防臭男", "跑步裤男", "运动裤子男", "拖鞋", "海伦凯勒", "善草纪", "瑷尔博士", "奥蜜思", "伊丽莎白雅顿", "菲洛嘉", "悦诗风吟", "欧舒丹", "chariano", "韩国奇姬", "御MEN", "苏菲娜", "RAY", "Klorane", "植物医生", "贝利达", "贝医生", "欧莱雅", "理肤泉", "薇诺娜", "Ferragamo", "Jurlique", "高姿", "Avene", "法国雅漾", "自然堂", "原装进口", "DHC", "妮维雅", "悦木之源", "汰渍", "清扬", "倩碧", "高露洁", "佳洁士", "欧乐B", "DARLIE", "好来", "速溶咖啡", "雀巢咖啡", "百事可乐", "可口可乐", "农夫山泉", "元气森林", "三只松鼠", "良品铺子", "百草味", "徐福记", "趣多多", "果脯", "每日坚果", "费列罗", "调和油5L", "大米5", "大米 5", "全麦", "上海梅林", "钙尔奇", "汤臣倍健", "养生堂", "YOTIME", "悠享时", "锐澳", "红茶", "绿茶", "毛峰", "毛尖", "铁观音", "comvita", "精酿啤酒", "原切", "三全", "伊利", "蒙牛", "安佳", "金龙鱼", "福临门", "安怡", "阿宽", "粽子", "烧卖", "披萨套餐", "江中食疗", "江中猴姑", "土鸡蛋", "梅林", "小龙虾", "大闸蟹", "Q109-01", "XDZ35F-3A", "PG-264", "DJJ-C"
    ]
//下面很重要，遇到问题请把下面注释看一遍再来问
let args_xh = {
    /*
     * 控制一次最多跑几个号，默认10个
     */
    try_num: process.env.JD_TRY_NUM * 1 || 10,
    /*
     * 控制是否输出当前环境变量设置，默认为false
     * 环境变量名称：XH_TRY_ENV
     */
    env: process.env.XH_TRY_ENV === 'true' || false,
    /*
     * 跳过某个指定账号，默认为全部账号清空
     * 填写规则：例如当前Cookie1为pt_key=key; pt_pin=pin1;则环境变量填写pin1即可，此时pin1的购物车将不会被清空
     * 若有更多，则按照pin1@pin2@pin3进行填写
     * 环境变量名称：XH_TRY_EXCEPT
     */
    except: process.env.XH_TRY_EXCEPT && process.env.XH_TRY_EXCEPT.split('@') || [],
    //以上环境变量新增于2022.01.30
    /*
     * 每个Tab页要便遍历的申请页数，由于京东试用又改了，获取不到每一个Tab页的总页数了(显示null)，所以特定增加一个环境变了以控制申请页数
     * 例如设置 JD_TRY_PRICE 为 30，假如现在正在遍历tab1，那tab1就会被遍历到30页，到31页就会跳到tab2，或下一个预设的tab页继续遍历到30页
     * 默认为35
     */
    totalPages: process.env.JD_TRY_TOTALPAGES * 1 || 35,
    /*
     * 由于每个账号每次获取的试用产品都不一样，所以为了保证每个账号都能试用到不同的商品，之前的脚本都不支持采用统一试用组的
     * 以下环境变量是用于指定是否采用统一试用组的
     * 例如当 JD_TRY_UNIFIED 为 true时，有3个账号，第一个账号跑脚本的时候，试用组是空的
     * 而当第一个账号跑完试用组后，第二个，第三个账号所采用的试用组默认采用的第一个账号的试用组
     * 优点：减少除第一个账号外的所有账号遍历，以减少每个账号的遍历时间
     * 缺点：A账号能申请的东西，B账号不一定有
     * 提示：想每个账号独立不同的试用产品的，请设置为false，想减少脚本运行时间的，请设置为true
     * 默认为false
     */
    unified: process.env.JD_TRY_UNIFIED === 'true' || false,
    //以上环境变量新增于2022.01.25
    /*
     * 商品原价，低于这个价格都不会试用，意思是
     * A商品原价49元，试用价1元，如果下面设置为50，那么A商品不会被加入到待提交的试用组
     * B商品原价99元，试用价0元，如果下面设置为50，那么B商品将会被加入到待提交的试用组
     * C商品原价99元，试用价1元，如果下面设置为50，那么C商品将会被加入到待提交的试用组
     * 默认为0
     * */
    jdPrice: process.env.JD_TRY_PRICE * 1 || 100,
    /*
     * 下面有一个function是可以获取tabId列表，名为try_tabList
     * 可设置环境变量：JD_TRY_TABID，用@进行分隔
     * tabId不定期会变,获取不到商品，自行获取并修改tabId
     * */
    tabId: process.env.JD_TRY_TABID && process.env.JD_TRY_TABID.split('@').map(Number) || [208, 209, 3, 5, 4, 204, 207, 7, 13, 206, 14, 205, 6, 8, 201, 203, 15, 10, 211, 16, 212, 210, 12, 202, 9, 11],
    /*
     * 试用商品标题过滤，黑名单，当标题存在关键词时，则不加入试用组
     * 当白名单和黑名单共存时，黑名单会自动失效，优先匹配白名单，匹配完白名单后不会再匹配黑名单，望周知
     * 例如A商品的名称为『旺仔牛奶48瓶特价』，设置了匹配白名单，白名单关键词为『牛奶』，但黑名单关键词存在『旺仔』
     * 这时，A商品还是会被添加到待提交试用组，白名单优先于黑名单
     * 已内置对应的 成人类 幼儿类 宠物 老年人类关键词，请勿重复添加
     * 可设置环境变量：JD_TRY_TITLEFILTERS，关键词与关键词之间用@分隔
     * */
    titleFilters: process.env.JD_TRY_TITLEFILTERS && process.env.JD_TRY_TITLEFILTERS.split('@') || [],
    /*
     * 试用价格(中了要花多少钱)，高于这个价格都不会试用，小于等于才会试用，意思就是
     * A商品原价49元，现在试用价1元，如果下面设置为10，那A商品将会被添加到待提交试用组，因为1 < 10
     * B商品原价49元，现在试用价2元，如果下面设置为1，那B商品将不会被添加到待提交试用组，因为2 > 1
     * C商品原价49元，现在试用价1元，如果下面设置为1，那C商品也会被添加到带提交试用组，因为1 = 1
     * 可设置环境变量：JD_TRY_TRIALPRICE，默认为0
     * */
    trialPrice: process.env.JD_TRY_TRIALPRICE * 1 || 5,
    /*
     * 最小提供数量，例如试用商品只提供2份试用资格，当前设置为1，则会进行申请
     * 若只提供5分试用资格，当前设置为10，则不会申请
     * 可设置环境变量：JD_TRY_MINSUPPLYNUM
     * */
    minSupplyNum: process.env.JD_TRY_MINSUPPLYNUM * 1 || 1,
    /*
     * 过滤大于设定值的已申请人数，例如下面设置的10000，A商品已经有10001人申请了，则A商品不会进行申请，会被跳过
     * 可设置环境变量：JD_TRY_APPLYNUMFILTER
     * */
    applyNumFilter: process.env.JD_TRY_APPLYNUMFILTER * 1 || 1000000,
    /*
     * 商品试用之间和获取商品之间的间隔, 单位：毫秒(1秒=1000毫秒)
     * 可设置环境变量：JD_TRY_APPLYINTERVAL
     * 默认为6000-9000随机
     * */
    applyInterval: process.env.JD_TRY_APPLYINTERVAL * 1 || 6000,
    /*
     * 商品数组的最大长度，通俗来说就是即将申请的商品队列长度
     * 例如设置为20，当第一次获取后获得12件，过滤后剩下5件，将会进行第二次获取，过滤后加上第一次剩余件数
     * 例如是18件，将会进行第三次获取，直到过滤完毕后为20件才会停止，不建议设置太大
     * 可设置环境变量：JD_TRY_MAXLENGTH
     * */
    maxLength: process.env.JD_TRY_MAXLENGTH * 1 || 500,
    /*
     * 过滤种草官类试用，某些试用商品是专属官专属，考虑到部分账号不是种草官账号
     * 例如A商品是种草官专属试用商品，下面设置为true，而你又不是种草官账号，那A商品将不会被添加到待提交试用组
     * 例如B商品是种草官专属试用商品，下面设置为false，而你是种草官账号，那A商品将会被添加到待提交试用组
     * 例如B商品是种草官专属试用商品，下面设置为true，即使你是种草官账号，A商品也不会被添加到待提交试用组
     * 可设置环境变量：JD_TRY_PASSZC，默认为true
     * */
    passZhongCao: process.env.JD_TRY_PASSZC === 'false' || false,
    /*
     * 是否打印输出到日志，考虑到如果试用组长度过大，例如100以上，如果每个商品检测都打印一遍，日志长度会非常长
     * 打印的优点：清晰知道每个商品为什么会被过滤，哪个商品被添加到了待提交试用组
     * 打印的缺点：会使日志变得很长
     *
     * 不打印的优点：简短日志长度
     * 不打印的缺点：无法清晰知道每个商品为什么会被过滤，哪个商品被添加到了待提交试用组
     * 可设置环境变量：JD_TRY_PLOG，默认为true
     * */
    printLog: process.env.JD_TRY_PLOG === 'false' ? false : true,
    /*
     * 白名单，是否打开，如果下面为true，那么黑名单会自动失效
     * 白名单和黑名单无法共存，白名单永远优先于黑名单
     * 可通过环境变量控制：JD_TRY_WHITELIST，默认为false
     * */
    whiteList: process.env.JD_TRY_WHITELIST === 'true' || false,
    /*
     * 白名单关键词，当标题存在关键词时，加入到试用组
     * 例如A商品的名字为『旺仔牛奶48瓶特价』，白名单其中一个关键词是『牛奶』，那么A将会直接被添加到待提交试用组，不再进行另外判断
     * 就算设置了黑名单也不会判断，希望这种写得那么清楚的脑瘫问题就别提issues了
     * 可通过环境变量控制：JD_TRY_WHITELIST，用@分隔
     * */
    whiteListKeywords: process.env.JD_TRY_WHITELISTKEYWORDS && process.env.JD_TRY_WHITELISTKEYWORDS.split('@') || [],
    /*
     * 每多少个账号发送一次通知，默认为4
     * 可通过环境变量控制 JD_TRY_SENDNUM
     * */
    sendNum: process.env.JD_TRY_SENDNUM * 1 || 4,
}
//上面很重要，遇到问题请把上面注释看一遍再来问
!(async () => {
    await $.wait(500)
    // 如果你要运行京东试用这个脚本，麻烦你把环境变量 JD_TRY 设置为 true
    if (1) {
        await requireConfig()
        if (!$.cookiesArr[0]) {
            $.msg($.name, '【提示】请先获取京东账号一cookie\n直接使用NobyDa的京东签到获取', 'https://bean.m.jd.com/', {
                "open-url": "https://bean.m.jd.com/"
            })
            return
        }
        args_xh.tabId = args_xh.tabId.sort(() => 0.5 - Math.random())
    for (let i = 0; i < args_xh.try_num; i++) {
            if ($.cookiesArr[i]) {
                $.cookie = $.cookiesArr[i];
                $.UserName = decodeURIComponent($.cookie.match(/pt_pin=(.+?);/) && $.cookie.match(/pt_pin=(.+?);/)[1])
                $.index = i + 1;
                $.isLogin = true;
                $.nickName = '';
                //await totalBean();
                console.log(`\n开始【京东账号${$.index}】${$.nickName || $.UserName}\n`);
                $.except = false;
                if(args_xh.except.includes($.UserName)){
                    console.log(`跳过账号：${$.nickName || $.UserName}`)
                    $.except = true;
                    continue
                }
                if(!$.isLogin){
                    $.msg($.name, `【提示】cookie已失效`, `京东账号${$.index} ${$.nickName || $.UserName}\n请重新登录获取\nhttps://bean.m.jd.com/bean/signIndex.action`, {
                        "open-url": "https://bean.m.jd.com/bean/signIndex.action"
                    });
                    await $.notify.sendNotify(`${$.name}cookie已失效 - ${$.UserName}`, `京东账号${$.index} ${$.UserName}\n请重新登录获取cookie`);
                    continue
                }
                $.totalTry = 0
                $.totalSuccess = 0
                $.nowTabIdIndex = 0;
                $.nowPage = 1;
                $.nowItem = 1;
                $.retrynum = 0
                $.jda='__jda='+_jda('1xxxxxxxx.164xxxxxxxxxxxxxxxxxxx.164xxxxxxx.165xxxxxx.165xxxxxx.1xx')
                if (!args_xh.unified) {
                    trialActivityIdList = []
                    trialActivityTitleList = []
                    trialActivityPriceList = []
                }
                $.isLimit = false;
                // 获取tabList的，不知道有哪些的把这里的注释解开跑一遍就行了
                 //await try_tabList();
                // return;
                $.isForbidden = false
                $.wrong = false
                size = 1

            // while (trialActivityIdList.length < args_xh.maxLength && $.retrynum < 5) {
            while (trialActivityIdList.length < args_xh.maxLength) {
                    if ($.nowTabIdIndex === args_xh.tabId.length) {
                    console.log(`tabId组已遍历完毕，不在获取商品\n`);
                    break;
                } else {
                    await try_feedsList(args_xh.tabId[$.nowTabIdIndex], $.nowPage)  //获取对应tabId的试用页面
                }
                if (trialActivityIdList.length < args_xh.maxLength) {
                    console.log(`间隔等待中，请等待3秒 \n`)
                    await $.wait(3000);
                }
            }
            if ($.isForbidden === false && $.isLimit === false) {
                console.log(`稍后将执行试用申请，请等待 2 秒\n`)
                await $.wait(2000);
                for (let i = 0; i < trialActivityIdList.length && $.isLimit === false; i++) {
                    if ($.isLimit) {
                        console.log("试用上限")
                        break
                    }
                    if ($.isForbidden) { console.log('403了，跳出'); break }
                    await try_apply(trialActivityTitleList[i], trialActivityIdList[i])
                    //console.log(`间隔等待中，请等待 ${args_xh.applyInterval} ms\n`)
                    const waitTime = generateRandomInteger(args_xh.applyInterval, 8000);
                    console.log(`随机等待${waitTime}ms后继续`);
                    await $.wait(waitTime);
                }
                console.log("试用申请执行完毕...")
                // await try_MyTrials(1, 1)    //申请中的商品
                $.giveupNum = 0;
                $.successNum = 0;
                $.getNum = 0;
                $.completeNum = 0;
                await try_MyTrials(1, 2)    //申请成功的商品
                // await try_MyTrials(1, 3)    //申请失败的商品
                await showMsg()
            }
        }
        if ($.isNode()) {
            if ($.index % args_xh.sendNum === 0) {
                $.sentNum++;
                console.log(`正在进行第 ${$.sentNum} 次发送通知，发送数量：${args_xh.sendNum}`)
                await $.notify.sendNotify(`${$.name}`, `${notifyMsg}`)
                notifyMsg = "";
            }
        }
    }
    if ($.isNode() && $.except === false) {
        if (($.cookiesArr.length - ($.sentNum * args_xh.sendNum)) < args_xh.sendNum && notifyMsg.length != 0) {
            console.log(`正在进行最后一次发送通知，发送数量：${($.cookiesArr.length - ($.sentNum * args_xh.sendNum))}`)
            await $.notify.sendNotify(`${$.name}`, `${notifyMsg}`)
            notifyMsg = "";
        }
    }
    } else {
    console.log(`\n您未设置变量export JD_TRY="true"运行【京东试用】脚本, 结束运行！\n`)
     }
})().catch((e) => {
    console.error(`❗️ ${$.name} 运行错误！\n${e}`)
}).finally(() => $.done())

function requireConfig() {
    return new Promise(resolve => {
        $.notify = $.isNode() ? require('./sendNotify') : { sendNotify: async () => { } }
        //获取 Cookies
        $.cookiesArr = []
        if ($.isNode()) {
            //Node.js用户请在jdCookie.js处填写京东ck;
            const jdCookieNode = require('./jdCookie.js');
            Object.keys(jdCookieNode).forEach((item) => {
                if (jdCookieNode[item]) $.cookiesArr.push(jdCookieNode[item])
            })
            if (process.env.JD_DEBUG && process.env.JD_DEBUG === 'false') console.log = () => { };
        } else {
            //IOS等用户直接用NobyDa的jd $.cookie
            $.cookiesArr = [$.getdata('CookieJD'), $.getdata('CookieJD2'), ...jsonParse($.getdata('CookiesJD') || "[]").map(item => item.cookie)].filter(item => !!item);
        }
        for (let keyWord of $.innerKeyWords) args_xh.titleFilters.push(keyWord)
        for (let keyWord of $.innerKeyWords_want) args_xh.whiteListKeywords.push(keyWord)
        console.log(`共${$.cookiesArr.length}个京东账号\n`)
        if (args_xh.env) {
            console.log('=========环境变量配置如下=========')
            console.log(`env: ${typeof args_xh.env}, ${args_xh.env}`)
            console.log(`try_num: ${typeof args_xh.try_num}, ${args_xh.try_num}`)
            console.log(`except: ${typeof args_xh.except}, ${args_xh.except}`)
            console.log(`totalPages: ${typeof args_xh.totalPages}, ${args_xh.totalPages}`)
            console.log(`unified: ${typeof args_xh.unified}, ${args_xh.unified}`)
            console.log(`jdPrice: ${typeof args_xh.jdPrice}, ${args_xh.jdPrice}`)
            console.log(`tabId: ${typeof args_xh.tabId}, ${args_xh.tabId}`)
            console.log(`titleFilters: ${typeof args_xh.titleFilters}, ${args_xh.titleFilters}`)
            console.log(`trialPrice: ${typeof args_xh.trialPrice}, ${args_xh.trialPrice}`)
            console.log(`minSupplyNum: ${typeof args_xh.minSupplyNum}, ${args_xh.minSupplyNum}`)
            console.log(`applyNumFilter: ${typeof args_xh.applyNumFilter}, ${args_xh.applyNumFilter}`)
            console.log(`applyInterval: ${typeof args_xh.applyInterval}, ${args_xh.applyInterval}`)
            console.log(`maxLength: ${typeof args_xh.maxLength}, ${args_xh.maxLength}`)
            console.log(`passZhongCao: ${typeof args_xh.passZhongCao}, ${args_xh.passZhongCao}`)
            console.log(`printLog: ${typeof args_xh.printLog}, ${args_xh.printLog}`)
            console.log(`whiteList: ${typeof args_xh.whiteList}, ${args_xh.whiteList}`)
            console.log(`whiteListKeywords: ${typeof args_xh.whiteListKeywords}, ${args_xh.whiteListKeywords}`)
            console.log('===============================')
        }
        resolve()
    })
}

//获取tabList的，如果不知道tabList有哪些，跑一遍这个function就行了
function try_tabList() {
    return new Promise((resolve, reject) => {
        console.log(`获取tabList中...`)
        const body = JSON.stringify({
            "version": 2,
            "previewTime": ""
        });
        let option = taskurl_xh('newtry', 'try_tabList', body)
        $.post(option, (err, resp, data) => {
            try {
                if (err) {
                    if (JSON.stringify(err) === `\"Response code 403 (Forbidden)\"`) {
                        $.isForbidden = true
                        console.log('账号被京东服务器风控，不再请求该帐号')
                    } else {
                        console.log(JSON.stringify(err))
                        console.log(`${$.name} API请求失败，请检查网路重试`)
                    }
                } else {
                    data = JSON.parse(data)
                    if (data.success) {
                        for (let tabId of data.data.tabList) console.log(`${tabId.tabName} - ${tabId.tabId}`)
                    } else {
                        console.log("获取失败", data)
                    }
                }
            } catch (e) {
                reject(`⚠️ ${arguments.callee.name.toString()} API返回结果解析出错\n${e}\n${JSON.stringify(data)}`)
            } finally {
                resolve()
            }
        })
    })
}

//获取商品列表并且过滤 By X1a0He
function try_feedsList(tabId, page) {
    return new Promise((resolve, reject) => {
        const body = JSON.stringify({
            "tabId": `${tabId}`,
            "page": page,
            "version": 2,
            "source": "default",
            "client": "app",
            //"previewTime": ""
        });
        let option = taskurl_xh('newtry', 'try_feedsList', body)
        $.post(option, (err, resp, data) => {
            try {
                if (err) {
                    if (JSON.stringify(err) === `\"Response code 403 (Forbidden)\"`) {
                        console.log(`请求失败，第 ${$.retrynum + 1} 次重试`)
                        $.retrynum++
                        // if ($.retrynum === 3) { $.isForbidden = true; $.log('多次尝试失败，换个时间再试！') }
                        if ($.retrynum === 5) { console.log(`多次尝试失败，跳过tabId:${tabId}的第${page}页！`); $.retrynum = 0; $.nowPage === args_xh.totalPages ? $.nowPage = 1 : $.nowPage++; }
                    } else {
                        console.log(JSON.stringify(err))
                        console.log(`${$.name} API请求失败，请检查网路重试`)
                    }
                } else {
                    data = JSON.parse(data)
                    let tempKeyword = ``;
                    if (data.data) {
                        $.nowPage === args_xh.totalPages ? $.nowPage = 1 : $.nowPage++;
                        console.log(`第 ${size++} 次获取试用商品成功，tabId:${args_xh.tabId[$.nowTabIdIndex]} 的 第 ${page}/${args_xh.totalPages} 页`)
                        console.log(`获取到商品 ${data.data.feedList.length} 条`)
                        for (let item of data.data.feedList) {
                            if (item.applyNum === null) {
                                args_xh.printLog ? console.log(`商品未到申请时间：${item.skuTitle}\n`) : ''
                                continue
                            }
                            if (trialActivityIdList.length >= args_xh.maxLength) {
                                console.log('商品列表长度已满.结束获取')
                                break
                            }
                            if (item.applyState === 1) {
                                args_xh.printLog ? console.log(`商品已申请试用：${item.skuTitle}\n`) : ''
                                continue
                            }
                            if (item.applyState !== null) {
                                args_xh.printLog ? console.log(`商品状态异常，未找到skuTitle\n`) : ''
                                continue
                            }
                            if (trialActivityIdList.some(f => item.trialActivityId.toString().includes(f))) {
                                args_xh.printLog ? console.log(`商品已在列表中：${item.skuTitle}\n`) : ''
                                continue
                            }                            
                            if (args_xh.passZhongCao) {
                                $.isPush = true;
                                if (item.tagList.length !== 0) {
                                    for (let itemTag of item.tagList) {
                                        if (itemTag.tagType === 3) {
                                            args_xh.printLog ? console.log('商品被过滤，该商品是种草官专属') : ''
                                            $.isPush = false;
                                            break;
                                        } else if (itemTag.tagType === 5) {
                                            args_xh.printLog ? console.log('商品被跳过，该商品是付费试用！') : ''
                                            $.isPush = false;
                                            break;
                                        }
                                    }
                                }
                            }
                            if (item.skuTitle && $.isPush) {
                                args_xh.printLog ? console.log(`检测 tabId:${args_xh.tabId[$.nowTabIdIndex]} 的 第 ${page}/${args_xh.totalPages} 页 第 ${$.nowItem++ + 1} 个商品\n${item.skuTitle}`) : ''
                                if (args_xh.whiteList) {
                                    if ((args_xh.whiteListKeywords.some(fileter_word => item.skuTitle.includes(fileter_word)))
                                     && (parseFloat(item.jdPrice) >= 24.5) && parseFloat(item.trialPrice) <= args_xh.trialPrice) {
                                        args_xh.printLog ? console.log(`商品白名单通过，将加入试用组，trialActivityId为${item.trialActivityId}\n`) : ''
                                        // trialActivityIdList.push(item.trialActivityId)
                                        // trialActivityTitleList.push(item.skuTitle)
                                        // trialActivityPriceList.push(item.jdPrice)

                                        let idx =  trialActivityPriceList.findIndex(it=>it<=parseFloat(item.jdPrice))
                                        trialActivityIdList.splice(idx===-1?trialActivityIdList.length:idx,0,item.trialActivityId)
                                        trialActivityTitleList.splice(idx===-1?trialActivityTitleList.length:idx,0,item.skuTitle)
                                        trialActivityPriceList.splice(idx===-1?trialActivityPriceList.length:idx,0,item.jdPrice)
                                    }
                                }// else {
                                    tempKeyword = ``;
                                    if (parseFloat(item.jdPrice) < args_xh.jdPrice) {
                                        args_xh.printLog ? console.log(`商品被过滤，商品价格 ${item.jdPrice} < ${args_xh.jdPrice} \n`) : ''
                                    } else if (parseFloat(item.supplyNum) < args_xh.minSupplyNum && item.supplyNum !== null) {
                                        args_xh.printLog ? console.log(`商品被过滤，提供申请的份数小于预设申请的份数 \n`) : ''
                                    } else if (parseFloat(item.applyNum) > args_xh.applyNumFilter && item.applyNum !== null) {
                                        args_xh.printLog ? console.log(`商品被过滤，已申请人数大于预设的${args_xh.applyNumFilter}人 \n`) : ''
                                    } else if (item.jdPrice === null) {
                                        args_xh.printLog ? console.log(`商品被过滤，商品无价，不能申请 \n`) : ''
                                    } else if (parseFloat(item.trialPrice) > args_xh.trialPrice) {
                                        args_xh.printLog ? console.log(`商品被过滤，商品试用价大于预设试用价 \n`) : ''
                                    } else if (args_xh.titleFilters.some(fileter_word => item.skuTitle.includes(fileter_word) ? tempKeyword = fileter_word : '')) {
                                        args_xh.printLog ? console.log(`商品被过滤，含有关键词 ${tempKeyword}\n`) : ''
                                    } else {
                                        args_xh.printLog ? console.log(`商品通过，加入试用组，trialActivityId为${item.trialActivityId}\n`) : ''
                                        if (trialActivityIdList.indexOf(item.trialActivityId) === -1) {
                                            // trialActivityIdList.push(item.trialActivityId)
                                            // trialActivityTitleList.push(item.skuTitle)
                                            // trialActivityPriceList.push(item.jdPrice)

                                            let idx =  trialActivityPriceList.findIndex(it=>it<=parseFloat(item.jdPrice))
                                            trialActivityIdList.splice(idx===-1?trialActivityIdList.length:idx,0,item.trialActivityId)
                                            trialActivityTitleList.splice(idx===-1?trialActivityTitleList.length:idx,0,item.skuTitle)
                                            trialActivityPriceList.splice(idx===-1?trialActivityPriceList.length:idx,0,item.jdPrice)
                                        }
                                    }
                                // }
                            } else if ($.isPush !== false) {
                                console.error('skuTitle解析异常')
                                return
                            }
                        }
                        console.log(`当前试用组长度为：${trialActivityIdList.length}`)
                        //args_xh.printLog ? console.log(`${trialActivityIdList}`) : ''
                        if ((page >= args_xh.totalPages && $.nowTabIdIndex < args_xh.tabId.length) || data.data.hasNext !== true) {
                            //这个是因为每一个tab都会有对应的页数，获取完如果还不够的话，就获取下一个tab
                            $.nowTabIdIndex++;
                            $.nowPage = 1;
                            $.nowItem = 1;
                        }
                        $.retrynum = 0
                    } else {
                        console.log(`💩 获得试用列表失败: ${data.message}`)
                    }
                }
            } catch (e) {
                reject(`⚠️ ${arguments.callee.name.toString()} API返回结果解析出错\n${e}\n${JSON.stringify(data)}`)
            } finally {
                resolve()
            }
        })
    })
}

function try_apply(title, activityId) {
    return new Promise(async (resolve, reject) => {
        console.log(`申请试用商品提交中...`)
        args_xh.printLog ? console.log(`商品：${title}`) : ''
        args_xh.printLog ? console.log(`id为：${activityId}`) : ''
        let body = JSON.stringify({
            "activityId": activityId,
            "previewTime": ""
        });
        body = await geth5st(body);
        // if(!body) return;
        let opt =
        {
            "url": `${URL}?${body}}`,
            'headers': {
                'Cookie': $.cookie + $.jda,
                'user-agent': 'jdapp;iPhone;10.1.2;15.0;ff2caa92a8529e4788a34b3d8d4df66d9573f499;network/wifi;model/iPhone13,4;addressid/2074196292;appBuild/167802;jdSupportDarkMode/1;Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148;supportJDSHWK/1',
                'Referer': 'https://prodev.m.jd.com/',
                'origin': 'https://prodev.m.jd.com/',
                'Accept': 'application/json,text/plain,*/*',
                'Accept-Encoding': 'gzip, deflate, br',
                'Accept-Language': 'zh-cn',
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        }
        $.get(opt, (err, resp, data) => {
            try {
                if (err) {
                    if (JSON.stringify(err) === `\"Response code 403 (Forbidden)\"`) {
                        $.isForbidden = true
                        console.log('账号被京东服务器风控，不再请求该帐号')
                    } else {
                        console.log(JSON.stringify(err))
                        console.log(`${$.name} API请求失败，请检查网路重试`)
                    }
                } else {
                    $.totalTry++
                    data = JSON.parse(data)
                    if (data.success && data.code === "1") {  // 申请成功
                        console.log("申请提交成功")
                        $.totalSuccess++
                    } else if (data.code === "-106") {
                        console.log(data.message)   // 未在申请时间内！
                    } else if (data.code === "-110") {
                        console.log(data.message)   // 您的申请已成功提交，请勿重复申请…
                    } else if (data.code === "-120") {
                        console.log(data.message)   // 您还不是会员，本品只限会员申请试用，请注册会员后申请！
                        AddMsg += `需入会：https://try.m.jd.com/${activityId}.html\n`
                    } else if (data.code === "-167") {
                        console.log(data.message)   // 抱歉，此试用需为种草官才能申请。查看下方详情了解更多。
                    } else if (data.code === "-131") {
                        console.log(data.message)   // 申请次数上限。
                        $.isLimit = true;
                    } else if (data.code === "-113") {
                        console.log(data.message)   // 操作不要太快哦！
                    } else {
                        console.log("申请失败", data)
                    }
                }
            } catch (e) {
                reject(`⚠️ ${arguments.callee.name.toString()} API返回结果解析出错\n${e}\n${JSON.stringify(data)}`)
            } finally {
                resolve()
            }
        })
    })
}

function try_MyTrials(page, selected) {

    return new Promise((resolve, reject) => {
        switch (selected) {
            case 1:
                console.log('正在获取已申请的商品...')
                break;
            case 2:
                console.log('正在获取申请成功的商品...')
                break;
            case 3:
                console.log('正在获取申请失败的商品...')
                break;
            default:
                console.log('selected错误')
        }
        let options = {
            url: URL,
            body: `appid=newtry&functionId=try_MyTrials&clientVersion=10.3.4&client=wh5&body=%7B%22page%22%3A${page}%2C%22selected%22%3A${selected}%2C%22previewTime%22%3A%22%22%7D`,
            headers: {
                'origin': 'https://prodev.m.jd.com',
                'User-Agent': 'jdapp;iPhone;10.3.4;;;M/5.0;appBuild/167945;jdSupportDarkMode/1;;;Mozilla/5.0 (iPhone; CPU iPhone OS 15_2_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148;supportJDSHWK/1;',
                'referer': 'https://prodev.m.jd.com/',
                'cookie': $.cookie + $.jda
            },
        }
        $.post(options, (err, resp, data) => {
            try {
                if (err) {
                    console.log(`🚫 ${arguments.callee.name.toString()} API请求失败，请检查网路\n${JSON.stringify(err)}`)
                } else {
                    data = JSON.parse(data)
                    if (data.success) {
                        //temp adjustment
                        if (selected === 2) {
                            if (data.success && data.data) {
                                for (let item of data.data.list) {
                                    item.status === 4 || item.text.text.includes('试用资格已过期') ? $.giveupNum += 1 : ''
                                    item.status === 2 && item.text.text.includes('试用资格将保留') ? $.successNum += 1 : ''
                                    item.status === 2 && item.text.text.includes('请收货后尽快提交报告') ? $.getNum += 1 : ''
                                    item.status === 2 && item.text.text.includes('试用已完成') ? $.completeNum += 1 : ''
                                }
                                console.log(`待领取 | 已领取 | 已完成 | 已放弃：${$.successNum} | ${$.getNum} | ${$.completeNum} | ${$.giveupNum}`)
                            } else {
                                console.log(`获得成功列表失败: ${data.message}`)
                            }
                        }
                    } else {
                        console.error(`ERROR:try_MyTrials`)
                    }
                }
            } catch (e) {
                reject(`⚠️ ${arguments.callee.name.toString()} API返回结果解析出错\n${e}\n${JSON.stringify(data)}`)
            } finally {
                resolve()
            }
        })
    })
}

function taskurl_xh(appid, functionId, body = JSON.stringify({})) {

    return {
        "url": `${URL}?appid=${appid}&functionId=${functionId}&clientVersion=11.0.2&client=wh5&body=${encodeURIComponent(body)}&h5st=${$.h5st}`,
        'headers': {
            'Cookie': $.cookie + $.jda,
            'user-agent': 'jdapp;iPhone;10.1.2;15.0;ff2caa92a8529e4788a34b3d8d4df66d9573f499;network/wifi;model/iPhone13,4;addressid/2074196292;appBuild/167802;jdSupportDarkMode/1;Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148;supportJDSHWK/1',
            'Referer': 'https://prodev.m.jd.com/',
            'origin': 'https://prodev.m.jd.com/',
            'Accept': 'application/json,text/plain,*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'zh-cn',
            'Content-Type': 'application/x-www-form-urlencoded',
        },
    }

}

async function showMsg() {
    let message = ``;
    message += `👤 京东账号${$.index} ${$.nickName || $.UserName}\n`;
    if ($.totalSuccess !== 0 && $.totalTry !== 0) {
        message += `🎉 本次提交申请：${$.totalSuccess}/${$.totalTry}个商品🛒\n`;
        message += `🎉 ${$.successNum}个商品待领取\n`;
        message += `🎉 ${$.getNum}个商品已领取\n`;
        message += `🎉 ${$.completeNum}个商品已完成\n`;
        message += `🗑 ${$.giveupNum}个商品已放弃\n\n`;
        message += AddMsg;
    } else {
        message += `⚠️ 本次执行没有申请试用商品\n`;
        message += `🎉 ${$.successNum}个商品待领取\n`;
        message += `🎉 ${$.getNum}个商品已领取\n`;
        message += `🎉 ${$.completeNum}个商品已完成\n`;
        message += `🗑 ${$.giveupNum}个商品已放弃\n\n`;
        message += AddMsg;
    }
    if (!args_xh.jdNotify || args_xh.jdNotify === 'false') {
        $.msg($.name, ``, message, {
            "open-url": 'https://try.m.jd.com/user'
        })
        if ($.isNode())
            notifyMsg += `${message}`
    } else {
        console.log(message)
    }
}

function totalBean() {
    return new Promise(async resolve => {
        const options = {
            "url": `https://wq.jd.com/user/info/QueryJDUserInfo?sceneval=2`,
            "headers": {
                "Accept": "application/json,text/plain, */*",
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept-Encoding": "gzip, deflate, br",
                "Accept-Language": "zh-cn",
                "Connection": "keep-alive",
                "Cookie": $.cookie,
                "Referer": "https://wqs.jd.com/my/jingdou/my.shtml?sceneval=2",
                "User-Agent": $.isNode() ? (process.env.JD_USER_AGENT ? process.env.JD_USER_AGENT : (require('./USER_AGENTS').USER_AGENT)) : ($.getdata('JDUA') ? $.getdata('JDUA') : "jdapp;iPhone;9.4.4;14.3;network/4g;Mozilla/5.0 (iPhone; CPU iPhone OS 14_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148;supportJDSHWK/1")
            },
            "timeout": 10000,
        }
        $.post(options, (err, resp, data) => {
            try {
                if (err) {
                    console.log(`${JSON.stringify(err)}`)
                    console.log(`${$.name} API请求失败，请检查网路重试`)
                } else {
                    if (data) {
                        data = JSON.parse(data);
                        if (data['retcode'] === 13) {
                            $.isLogin = false; //cookie过期
                            return
                        }
                        if (data['retcode'] === 0) {
                            $.nickName = (data['base'] && data['base'].nickname) || $.UserName;
                        } else {
                            $.nickName = $.UserName
                        }
                    } else {
                        console.log(`京东服务器返回空数据`)
                    }
                }
            } catch (e) {
                $.logErr(e, resp)
            } finally {
                resolve();
            }
        })
    })
}
function geth5st(body) {
    let opt = {
        url: `https://api.nolanstore.top/h5st`,
        body: JSON.stringify({
            "appId": "a8ade",
            "functionId": "try_apply",
            "body": body,
            "appid": "newtry",
            "client": "wh5",
            "clientVersion": "11.0.2",
            "ua": 'jdapp;iPhone;10.1.2;15.0;ff2caa92a8529e4788a34b3d8d4df66d9573f499;network/wifi;model/iPhone13,4;addressid/2074196292;appBuild/167802;jdSupportDarkMode/1;Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148;supportJDSHWK/1',
            "pin": encodeURIComponent($.UserName)
        }),
        headers: {
            "Content-Type": "application/json"
        },
		timeout: 30000,
    },str='';
    return new Promise((resolve) => {
        $.post(opt, (err, resp, data) => {
            try {
                if (err) {
                    console.log(JSON.stringify(err));
                } else {
                    data = JSON.parse(data);
                    if (data.code == 200) {
                        str = data.body;
                    } else {
                        $.log('连接服务失败',data.msg);
                    }
                }
            } catch (e) {
                console.log(e, resp);
            } finally {
                resolve(str);
            }
        })
    })
}

function jsonParse(str) {
    if (typeof str == "string") {
        try {
            return JSON.parse(str);
        } catch (e) {
            console.log(e);
            $.msg($.name, '', '请勿随意在BoxJs输入框修改内容\n建议通过脚本去获取cookie')
            return [];
        }
    }
}

function _jda(format = 'xxxxxxxxxxxxxxxxxxxx') {
    return format.replace(/[xy]/g, function (c) {
        var r = Math.random() * 10 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        jdaid = v.toString()
        return jdaid;
    });
}
const generateRandomInteger = (min, max = 0) => {
    if (min > max) {
        let temp = min;
        min = max;
        max = temp;
    }
    var Range = max - min;
    var Rand = Math.random();
    return min + Math.round(Rand * Range);
};

function getExtract(array) {
    const random = (min, max) => Math.floor(Math.random() * (max - min) + min);
    let index = random(0, array.length);
    return array.splice(index, 1);
}

function Env(name, opts) {
    class Http {
        constructor(env) {
            this.env = env
        }

        send(opts, method = 'GET') {
            opts = typeof opts === 'string' ? {
                url: opts
            } : opts
            let sender = this.get
            if (method === 'POST') {
                sender = this.post
            }
            return new Promise((resolve, reject) => {
                sender.call(this, opts, (err, resp, body) => {
                    if (err) reject(err)
                    else resolve(resp)
                })
            })
        }

        get(opts) {
            return this.send.call(this.env, opts)
        }

        post(opts) {
            return this.send.call(this.env, opts, 'POST')
        }
    }

    return new (class {
        constructor(name, opts) {
            this.name = name
            this.http = new Http(this)
            this.data = null
            this.dataFile = 'box.dat'
            this.logs = []
            this.isMute = false
            this.isNeedRewrite = false
            this.logSeparator = '\n'
            this.startTime = new Date().getTime()
            Object.assign(this, opts)
            this.log('', `🔔${this.name}, 开始!`)
        }

        isNode() {
            return 'undefined' !== typeof module && !!module.exports
        }

        isQuanX() {
            return 'undefined' !== typeof $task
        }

        isSurge() {
            return 'undefined' !== typeof $httpClient && 'undefined' === typeof $loon
        }

        isLoon() {
            return 'undefined' !== typeof $loon
        }

        toObj(str, defaultValue = null) {
            try {
                return JSON.parse(str)
            } catch {
                return defaultValue
            }
        }

        toStr(obj, defaultValue = null) {
            try {
                return JSON.stringify(obj)
            } catch {
                return defaultValue
            }
        }

        getjson(key, defaultValue) {
            let json = defaultValue
            const val = this.getdata(key)
            if (val) {
                try {
                    json = JSON.parse(this.getdata(key))
                } catch { }
            }
            return json
        }

        setjson(val, key) {
            try {
                return this.setdata(JSON.stringify(val), key)
            } catch {
                return false
            }
        }

        getScript(url) {
            return new Promise((resolve) => {
                this.get({
                    url
                }, (err, resp, body) => resolve(body))
            })
        }

        runScript(script, runOpts) {
            return new Promise((resolve) => {
                let httpapi = this.getdata('@chavy_boxjs_userCfgs.httpapi')
                httpapi = httpapi ? httpapi.replace(/\n/g, '').trim() : httpapi
                let httpapi_timeout = this.getdata('@chavy_boxjs_userCfgs.httpapi_timeout')
                httpapi_timeout = httpapi_timeout ? httpapi_timeout * 1 : 20
                httpapi_timeout = runOpts && runOpts.timeout ? runOpts.timeout : httpapi_timeout
                const [key, addr] = httpapi.split('@')
                const opts = {
                    url: `http://${addr}/v1/scripting/evaluate`,
                    body: {
                        script_text: script,
                        mock_type: 'cron',
                        timeout: httpapi_timeout
                    },
                    headers: {
                        'X-Key': key,
                        'Accept': '*/*'
                    }
                }
                this.post(opts, (err, resp, body) => resolve(body))
            }).catch((e) => this.logErr(e))
        }

        loaddata() {
            if (this.isNode()) {
                this.fs = this.fs ? this.fs : require('fs')
                this.path = this.path ? this.path : require('path')
                const curDirDataFilePath = this.path.resolve(this.dataFile)
                const rootDirDataFilePath = this.path.resolve(process.cwd(), this.dataFile)
                const isCurDirDataFile = this.fs.existsSync(curDirDataFilePath)
                const isRootDirDataFile = !isCurDirDataFile && this.fs.existsSync(rootDirDataFilePath)
                if (isCurDirDataFile || isRootDirDataFile) {
                    const datPath = isCurDirDataFile ? curDirDataFilePath : rootDirDataFilePath
                    try {
                        return JSON.parse(this.fs.readFileSync(datPath))
                    } catch (e) {
                        return {}
                    }
                } else return {}
            } else return {}
        }

        writedata() {
            if (this.isNode()) {
                this.fs = this.fs ? this.fs : require('fs')
                this.path = this.path ? this.path : require('path')
                const curDirDataFilePath = this.path.resolve(this.dataFile)
                const rootDirDataFilePath = this.path.resolve(process.cwd(), this.dataFile)
                const isCurDirDataFile = this.fs.existsSync(curDirDataFilePath)
                const isRootDirDataFile = !isCurDirDataFile && this.fs.existsSync(rootDirDataFilePath)
                const jsondata = JSON.stringify(this.data)
                if (isCurDirDataFile) {
                    this.fs.writeFileSync(curDirDataFilePath, jsondata)
                } else if (isRootDirDataFile) {
                    this.fs.writeFileSync(rootDirDataFilePath, jsondata)
                } else {
                    this.fs.writeFileSync(curDirDataFilePath, jsondata)
                }
            }
        }

        lodash_get(source, path, defaultValue = undefined) {
            const paths = path.replace(/\[(\d+)\]/g, '.$1').split('.')
            let result = source
            for (const p of paths) {
                result = Object(result)[p]
                if (result === undefined) {
                    return defaultValue
                }
            }
            return result
        }

        lodash_set(obj, path, value) {
            if (Object(obj) !== obj) return obj
            if (!Array.isArray(path)) path = path.toString().match(/[^.[\]]+/g) || []
            path.slice(0, -1).reduce((a, c, i) => (Object(a[c]) === a[c] ? a[c] : (a[c] = Math.abs(path[i + 1]) >> 0 === +path[i + 1] ? [] : {})), obj)[
                path[path.length - 1]
            ] = value
            return obj
        }

        getdata(key) {
            let val = this.getval(key)
            // 如果以 @
            if (/^@/.test(key)) {
                const [, objkey, paths] = /^@(.*?)\.(.*?)$/.exec(key)
                const objval = objkey ? this.getval(objkey) : ''
                if (objval) {
                    try {
                        const objedval = JSON.parse(objval)
                        val = objedval ? this.lodash_get(objedval, paths, '') : val
                    } catch (e) {
                        val = ''
                    }
                }
            }
            return val
        }

        setdata(val, key) {
            let issuc = false
            if (/^@/.test(key)) {
                const [, objkey, paths] = /^@(.*?)\.(.*?)$/.exec(key)
                const objdat = this.getval(objkey)
                const objval = objkey ? (objdat === 'null' ? null : objdat || '{}') : '{}'
                try {
                    const objedval = JSON.parse(objval)
                    this.lodash_set(objedval, paths, val)
                    issuc = this.setval(JSON.stringify(objedval), objkey)
                } catch (e) {
                    const objedval = {}
                    this.lodash_set(objedval, paths, val)
                    issuc = this.setval(JSON.stringify(objedval), objkey)
                }
            } else {
                issuc = this.setval(val, key)
            }
            return issuc
        }

        getval(key) {
            if (this.isSurge() || this.isLoon()) {
                return $persistentStore.read(key)
            } else if (this.isQuanX()) {
                return $prefs.valueForKey(key)
            } else if (this.isNode()) {
                this.data = this.loaddata()
                return this.data[key]
            } else {
                return (this.data && this.data[key]) || null
            }
        }

        setval(val, key) {
            if (this.isSurge() || this.isLoon()) {
                return $persistentStore.write(val, key)
            } else if (this.isQuanX()) {
                return $prefs.setValueForKey(val, key)
            } else if (this.isNode()) {
                this.data = this.loaddata()
                this.data[key] = val
                this.writedata()
                return true
            } else {
                return (this.data && this.data[key]) || null
            }
        }

        initGotEnv(opts) {
            this.got = this.got ? this.got : require('got')
            this.cktough = this.cktough ? this.cktough : require('tough-cookie')
            this.ckjar = this.ckjar ? this.ckjar : new this.cktough.CookieJar()
            if (opts) {
                opts.headers = opts.headers ? opts.headers : {}
                if (undefined === opts.headers.Cookie && undefined === opts.cookieJar) {
                    opts.cookieJar = this.ckjar
                }
            }
        }

        get(opts, callback = () => { }) {
            if (opts.headers) {
                delete opts.headers['Content-Type']
                delete opts.headers['Content-Length']
            }
            if (this.isSurge() || this.isLoon()) {
                if (this.isSurge() && this.isNeedRewrite) {
                    opts.headers = opts.headers || {}
                    Object.assign(opts.headers, {
                        'X-Surge-Skip-Scripting': false
                    })
                }
                $httpClient.get(opts, (err, resp, body) => {
                    if (!err && resp) {
                        resp.body = body
                        resp.statusCode = resp.status
                    }
                    callback(err, resp, body)
                })
            } else if (this.isQuanX()) {
                if (this.isNeedRewrite) {
                    opts.opts = opts.opts || {}
                    Object.assign(opts.opts, {
                        hints: false
                    })
                }
                $task.fetch(opts).then(
                    (resp) => {
                        const {
                            statusCode: status,
                            statusCode,
                            headers,
                            body
                        } = resp
                        callback(null, {
                            status,
                            statusCode,
                            headers,
                            body
                        }, body)
                    },
                    (err) => callback(err)
                )
            } else if (this.isNode()) {
                this.initGotEnv(opts)
                this.got(opts).on('redirect', (resp, nextOpts) => {
                    try {
                        if (resp.headers['set-cookie']) {
                            const ck = resp.headers['set-cookie'].map(this.cktough.Cookie.parse).toString()
                            if (ck) {
                                this.ckjar.setCookieSync(ck, null)
                            }
                            nextOpts.cookieJar = this.ckjar
                        }
                    } catch (e) {
                        this.logErr(e)
                    }
                    // this.ckjar.setCookieSync(resp.headers['set-cookie'].map(Cookie.parse).toString())
                }).then(
                    (resp) => {
                        const {
                            statusCode: status,
                            statusCode,
                            headers,
                            body
                        } = resp
                        callback(null, {
                            status,
                            statusCode,
                            headers,
                            body
                        }, body)
                    },
                    (err) => {
                        const {
                            message: error,
                            response: resp
                        } = err
                        callback(error, resp, resp && resp.body)
                    }
                )
            }
        }

        post(opts, callback = () => { }) {
            // 如果指定了请求体, 但没指定`Content-Type`, 则自动生成
            if (opts.body && opts.headers && !opts.headers['Content-Type']) {
                opts.headers['Content-Type'] = 'application/x-www-form-urlencoded'
            }
            if (opts.headers) delete opts.headers['Content-Length']
            if (this.isSurge() || this.isLoon()) {
                if (this.isSurge() && this.isNeedRewrite) {
                    opts.headers = opts.headers || {}
                    Object.assign(opts.headers, {
                        'X-Surge-Skip-Scripting': false
                    })
                }
                $httpClient.post(opts, (err, resp, body) => {
                    if (!err && resp) {
                        resp.body = body
                        resp.statusCode = resp.status
                    }
                    callback(err, resp, body)
                })
            } else if (this.isQuanX()) {
                opts.method = 'POST'
                if (this.isNeedRewrite) {
                    opts.opts = opts.opts || {}
                    Object.assign(opts.opts, {
                        hints: false
                    })
                }
                $task.fetch(opts).then(
                    (resp) => {
                        const {
                            statusCode: status,
                            statusCode,
                            headers,
                            body
                        } = resp
                        callback(null, {
                            status,
                            statusCode,
                            headers,
                            body
                        }, body)
                    },
                    (err) => callback(err)
                )
            } else if (this.isNode()) {
                this.initGotEnv(opts)
                const {
                    url,
                    ..._opts
                } = opts
                this.got.post(url, _opts).then(
                    (resp) => {
                        const {
                            statusCode: status,
                            statusCode,
                            headers,
                            body
                        } = resp
                        callback(null, {
                            status,
                            statusCode,
                            headers,
                            body
                        }, body)
                    },
                    (err) => {
                        const {
                            message: error,
                            response: resp
                        } = err
                        callback(error, resp, resp && resp.body)
                    }
                )
            }
        }

        /**
         *
         * 示例:$.time('yyyy-MM-dd qq HH:mm:ss.S')
         *    :$.time('yyyyMMddHHmmssS')
         *    y:年 M:月 d:日 q:季 H:时 m:分 s:秒 S:毫秒
         *    其中y可选0-4位占位符、S可选0-1位占位符，其余可选0-2位占位符
         * @param {*} fmt 格式化参数
         *
         */
        time(fmt) {
            let o = {
                'M+': new Date().getMonth() + 1,
                'd+': new Date().getDate(),
                'H+': new Date().getHours(),
                'm+': new Date().getMinutes(),
                's+': new Date().getSeconds(),
                'q+': Math.floor((new Date().getMonth() + 3) / 3),
                'S': new Date().getMilliseconds()
            }
            if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (new Date().getFullYear() + '').substr(4 - RegExp.$1.length))
            for (let k in o)
                if (new RegExp('(' + k + ')').test(fmt))
                    fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length))
            return fmt
        }

        /**
         * 系统通知
         *
         * > 通知参数: 同时支持 QuanX 和 Loon 两种格式, EnvJs根据运行环境自动转换, Surge 环境不支持多媒体通知
         *
         * 示例:
         * $.msg(title, subt, desc, 'twitter://')
         * $.msg(title, subt, desc, { 'open-url': 'twitter://', 'media-url': 'https://github.githubassets.com/images/modules/open_graph/github-mark.png' })
         * $.msg(title, subt, desc, { 'open-url': 'https://bing.com', 'media-url': 'https://github.githubassets.com/images/modules/open_graph/github-mark.png' })
         *
         * @param {*} title 标题
         * @param {*} subt 副标题
         * @param {*} desc 通知详情
         * @param {*} opts 通知参数
         *
         */
        msg(title = name, subt = '', desc = '', opts) {
            const toEnvOpts = (rawopts) => {
                if (!rawopts) return rawopts
                if (typeof rawopts === 'string') {
                    if (this.isLoon()) return rawopts
                    else if (this.isQuanX()) return {
                        'open-url': rawopts
                    }
                    else if (this.isSurge()) return {
                        url: rawopts
                    }
                    else return undefined
                } else if (typeof rawopts === 'object') {
                    if (this.isLoon()) {
                        let openUrl = rawopts.openUrl || rawopts.url || rawopts['open-url']
                        let mediaUrl = rawopts.mediaUrl || rawopts['media-url']
                        return {
                            openUrl,
                            mediaUrl
                        }
                    } else if (this.isQuanX()) {
                        let openUrl = rawopts['open-url'] || rawopts.url || rawopts.openUrl
                        let mediaUrl = rawopts['media-url'] || rawopts.mediaUrl
                        return {
                            'open-url': openUrl,
                            'media-url': mediaUrl
                        }
                    } else if (this.isSurge()) {
                        let openUrl = rawopts.url || rawopts.openUrl || rawopts['open-url']
                        return {
                            url: openUrl
                        }
                    }
                } else {
                    return undefined
                }
            }
            if (!this.isMute) {
                if (this.isSurge() || this.isLoon()) {
                    $notification.post(title, subt, desc, toEnvOpts(opts))
                } else if (this.isQuanX()) {
                    $notify(title, subt, desc, toEnvOpts(opts))
                }
            }
            if (!this.isMuteLog) {
                let logs = ['', '==============📣系统通知📣==============']
                logs.push(title)
                subt ? logs.push(subt) : ''
                desc ? logs.push(desc) : ''
                console.log(logs.join('\n'))
                this.logs = this.logs.concat(logs)
            }
        }

        log(...logs) {
            if (logs.length > 0) {
                this.logs = [...this.logs, ...logs]
            }
            console.log(logs.join(this.logSeparator))
        }

        logErr(err, msg) {
            const isPrintSack = !this.isSurge() && !this.isQuanX() && !this.isLoon()
            if (!isPrintSack) {
                this.log('', `❗️${this.name}, 错误!`, err)
            } else {
                this.log('', `❗️${this.name}, 错误!`, err.stack)
            }
        }

        wait(time) {
            return new Promise((resolve) => setTimeout(resolve, time))
        }

        done(val = {}) {
            const endTime = new Date().getTime()
            const costTime = (endTime - this.startTime) / 1000
            this.log('', `🔔${this.name}, 结束! 🕛 ${costTime} 秒`)
            this.log()
            if (this.isSurge() || this.isQuanX() || this.isLoon()) {
                $done(val)
            }
        }
    })(name, opts)
}
